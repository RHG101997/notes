{"pageProps":{"note":{"id":"890WfoWQ9bmoUsyzSkHYq","title":"C++ Streams","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[{"from":{"fname":"Proggramming Language.C++","vaultName":"vault"},"type":"backlink","position":{"start":{"line":10,"column":3,"offset":207},"end":{"line":10,"column":44,"offset":248},"indent":[]},"value":"Proggramming Language.C++.C++ Streams"}],"anchors":{"intro-link":{"type":"header","text":"Intro: Link","value":"intro-link","line":9,"column":0,"depth":2},"file-stream-and-error-handling-link":{"type":"header","text":"File Stream and Error Handling: Link","value":"file-stream-and-error-handling-link","line":39,"column":0,"depth":2},"formatted-and-unformatted-io-link":{"type":"header","text":"Formatted and Unformatted IO: Link","value":"formatted-and-unformatted-io-link","line":98,"column":0,"depth":2},"manipulators-link":{"type":"header","text":"Manipulators: Link","value":"manipulators-link","line":163,"column":0,"depth":2},"stream-buffer-link":{"type":"header","text":"Stream Buffer: Link","value":"stream-buffer-link","line":194,"column":0,"depth":2},"string-stream--link":{"type":"header","text":"String Stream : Link","value":"string-stream--link","line":238,"column":0,"depth":2},"enable-streaming-for-your-own-class-link":{"type":"header","text":"Enable Streaming for Your Own Class: Link","value":"enable-streaming-for-your-own-class-link","line":270,"column":0,"depth":2}},"fname":"Proggramming Language.C++.C++ Streams","updated":1639771110085,"created":1639771099979,"parent":"2yA501ntEdXEMxKAJrL7o","children":[],"data":{},"contentHash":"4d3b4af72a70740b2ef70998ab40bd2f","custom":{}},"body":"<h1 id=\"c-streams\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#c-streams\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>C++ Streams</h1>\n<h2 id=\"intro-link\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#intro-link\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Intro: <a href=\"https://www.youtube.com/watch?v=hk5NYscSPHI&#x26;list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&#x26;index=18&#x26;ab_channel=BoQian\">Link</a></h2>\n<p>What is stream?: Serial IO Interferface to external devices (file, stdin/stdout, network, etc.)</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">string <span class=\"token function\">s</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'t'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Random access</span>\n<span class=\"token comment\">//cout[3] = 't'; // Error</span>\n\n<span class=\"token punctuation\">{</span>\nofstream <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyLog.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Creates a new file for write, if the file didn't exist</span>\nof <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Text\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\nof <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">234</span> <span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span>\nof <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">2.3</span> <span class=\"token operator\">&#x3C;&#x3C;</span>endl<span class=\"token punctuation\">;</span> \n\nof <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token generic-function\"><span class=\"token function\">bitset</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token number\">8</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 00001110</span>\nof <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token generic-function\"><span class=\"token function\">complex</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// (2,3)</span>\n\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">//RAII</span>\n\n</code></pre>\n<p>IO Operations:</p>\n<p>formatting the data  &#x3C;-------->  communicatiing the data with external devices</p>\n<p>Software Engineer Principle: Low Couping -> Resuability</p>\n<h2 id=\"file-stream-and-error-handling-link\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#file-stream-and-error-handling-link\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>File Stream and Error Handling: <a href=\"https://www.youtube.com/watch?v=bzlDPBKn2Fs&#x26;list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&#x26;index=18&#x26;ab_channel=BoQian\">Link</a></h2>\n<p><strong>Ouput</strong>: </p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token punctuation\">{</span>\n    ofstream <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Log.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Open file for write , and clear the file</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Text to the file\"</span><span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">{</span>\n    ofstream <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Log.txt\"</span><span class=\"token punctuation\">,</span> ofstream<span class=\"token double-colon punctuation\">::</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Move the output pointer to te end of the file</span>\n    cout<span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Text to the file\"</span><span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span>\n    ofstream <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Log.txt\"</span><span class=\"token punctuation\">,</span> ofstream<span class=\"token double-colon punctuation\">::</span>in <span class=\"token operator\">|</span> ofstream<span class=\"token double-colon punctuation\">::</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    of<span class=\"token punctuation\">.</span><span class=\"token function\">seekp</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>beg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Move the output pointer 10 chars after begin</span>\n    of <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"12345\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Overwrite 5 char</span>\n    of<span class=\"token punctuation\">.</span><span class=\"token function\">seekp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Move the output  pointer 5 chars before end</span>\n    of <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"More text, more text\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n    of<span class=\"token punctuation\">.</span><span class=\"token function\">seekp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Move the ouput pointer 5 char before the current position</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Input</strong>: </p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token punctuation\">{</span>\n    ifstream <span class=\"token function\">inf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Log.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    inf <span class=\"token operator\">>></span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// read one word</span>\n    <span class=\"token comment\">// Error status: goodbit, badbit, failbit, eofbit</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">good</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Everything is OK (goodbit = 1)</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">bad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Non-recoverable error (badbit = 1)</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Failed Stream operation (failbit == 1 badbit == 1)</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">eof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// End of file (eofbit == 1)</span>\n\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clear all error status</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>badbit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sets a new value to the error flag</span>\n\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">rdstate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Read the current status flag</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span>inf<span class=\"token punctuation\">.</span><span class=\"token function\">rdstate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;</span> <span class=\"token operator\">~</span>ios<span class=\"token double-colon punctuation\">::</span>failbit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Clear only the failbit</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inf<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Equivalent to: if (!inf.fail())</span>\n        cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Read successfully\"</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>inf <span class=\"token operator\">>></span> i<span class=\"token punctuation\">)</span>\n        cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Read successfully\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Handle the errors with exceptions</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">exceptions</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>badbit <span class=\"token operator\">|</span> ios<span class=\"token double-colon punctuation\">::</span>failbit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// setting the exception mask</span>\n    <span class=\"token comment\">// When badbit or failbit set 1, exception of iosLLfailure will be thrown</span>\n    <span class=\"token comment\">// When eofbit set to 1, no exception </span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">exceptions</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>goodbit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// No exception</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"formatted-and-unformatted-io-link\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#formatted-and-unformatted-io-link\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Formatted and Unformatted IO: <a href=\"https://www.youtube.com/watch?v=CdZxKlC7Y-E&#x26;list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&#x26;index=19&#x26;ab_channel=BoQian\">Link</a></h2>\n<p><strong>Formatting IO</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">    \n    cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">34</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//34</span>\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>oct<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>basefield<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ocatal</span>\n    cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">34</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 42</span>\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>showbase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">34</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 042</span>\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>hex<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>basefield<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token number\">34</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0x22</span>\n\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">unsetf</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>showbase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">34</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 22</span>\n\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>dec<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>basefield<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">26</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//          26</span>\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>left<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>adjustfield<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//26</span>\n\n    <span class=\"token comment\">// Floating points values</span>\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>scientific<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>floatfield<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">340.1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3.401000e+002</span>\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>fixed<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>floatfield<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">340.1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//340.100000</span>\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">precision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>l\n    cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">340.1</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//340.100</span>\n\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>hex<span class=\"token punctuation\">,</span> ios<span class=\"token double-colon punctuation\">::</span>basefield<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    cin <span class=\"token operator\">>></span> in <span class=\"token comment\">// Enter: 12</span>\n    <span class=\"token comment\">//i==18</span>\n\n    ios<span class=\"token double-colon punctuation\">::</span>fmtflags f <span class=\"token operator\">=</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">flags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Current flags been used</span>\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">flags</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>oct <span class=\"token operator\">|</span> ios<span class=\"token double-colon punctuation\">::</span>showbase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">flags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// returns ios::oct | ios::showbase</span>\n\n</code></pre>\n<p><strong>Unformated IO</strong></p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">    ifstream <span class=\"token function\">inf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Log.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// read up to 80 chars and save to buf</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">getLine</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//readu up to 80 or until a '\\n'</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// read 80 chars</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">unget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return a char back to the stream( retuns same last char)</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">putback</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//returns a char 'z' to the stream</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    inf<span class=\"token punctuation\">.</span><span class=\"token function\">gcount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// return the number of  chars  being read  bu last unformatted read</span>\n\n    <span class=\"token comment\">//output</span>\n    ofstream <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Log.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    of<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    of<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// write first 6 chars of buf</span>\n    of<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Flush output to screen in case of cout</span>\n</code></pre>\n<h2 id=\"manipulators-link\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#manipulators-link\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Manipulators: <a href=\"https://www.youtube.com/watch?v=yMseUJm1604&#x26;list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&#x26;index=20&#x26;ab_channel=BoQian\">Link</a></h2>\n<p>Descriptions: In this video <a href=\"https://www.youtube.com/channel/UCEOGtxYTB6vo6MQ-WQ9W_nQ\">Bo Qian</a> explains what are manipulators by using an example that is well know <code>std::endl</code>. A brief description concludes that endl is a fucntion that <strong>manipulates</strong> the stream.</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">\n    ostream<span class=\"token operator\">&#x26;</span> <span class=\"token function\">endl</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&#x26;</span> sm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// Manipulator</span>\n        sm<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sm<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sm<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ostream<span class=\"token operator\">&#x26;</span> ostream<span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&#x26;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//endl: '\\n' and flush</span>\n        <span class=\"token comment\">// object? Build-in data type? function? (look to func above)</span>\n\n        <span class=\"token comment\">// More manipulators</span>\n        cout <span class=\"token operator\">&#x3C;&#x3C;</span> ends<span class=\"token punctuation\">;</span> <span class=\"token comment\">//'\\0'</span>\n        cout <span class=\"token operator\">&#x3C;&#x3C;</span> flush<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> ws<span class=\"token punctuation\">;</span> <span class=\"token comment\">// read and discard white spaces</span>\n        cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> left <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">setfill</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">99</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//99______</span>\n        cout <span class=\"token operator\">&#x3C;&#x3C;</span> hex <span class=\"token operator\">&#x3C;&#x3C;</span> showbase <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">14</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//0xe</span>\n        \n        <span class=\"token comment\">// More in: https://www.cplusplus.com/reference/ios/</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"stream-buffer-link\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#stream-buffer-link\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Stream Buffer: <a href=\"https://www.youtube.com/watch?v=HwtFcT-ueu8&#x26;list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&#x26;index=21&#x26;ab_channel=BoQian\">Link</a></h2>\n<p>IO Operations:</p>\n<ul>\n<li>Formating data -- stream</li>\n<li>Communicating data to external devices -- stream buffer</li>\n</ul>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">\n    cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">34</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Formatting</span>\n    streambuf<span class=\"token operator\">*</span> pbuf <span class=\"token operator\">=</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">rdbuf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ostream <span class=\"token function\">myCout</span><span class=\"token punctuation\">(</span>pbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myCout<span class=\"token punctuation\">.</span><span class=\"token function\">setf</span><span class=\"token punctuation\">(</span>ios<span class=\"token double-colon punctuation\">::</span>showpos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myCout<span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    myCout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">12</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//        +12</span>\n    cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">12</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//12</span>\n    \n    <span class=\"token comment\">//Redirecting</span>\n    ofstream <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Log.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    streambuf<span class=\"token operator\">*</span> oriBuf <span class=\"token operator\">=</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">rdbuf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// saving backup from original</span>\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">rdbuf</span><span class=\"token punctuation\">(</span>of<span class=\"token punctuation\">.</span><span class=\"token function\">rdbuf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Log.txt has \"Hello\"</span>\n\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">rdbuf</span><span class=\"token punctuation\">(</span>oriBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// setting cout to original buffer</span>\n\n    cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"Bye\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//stdout: Bye</span>\n\n    <span class=\"token comment\">//Stream buffer iterator</span>\n    istreambuf_iterator<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token function\">i</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ostreambuf_iterator<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token function\">o</span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Copy</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>i <span class=\"token operator\">!=</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">*</span>o <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>o<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token comment\">// exit option if press x</span>\n\n    <span class=\"token comment\">//Similar to copy with no exit</span>\n    <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">istreambuf_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">istreambuf_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token generic-function\"><span class=\"token function\">ostreambuf_iterator</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>cout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<h2 id=\"string-stream--link\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#string-stream--link\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>String Stream : <a href=\"https://www.youtube.com/watch?v=VzM1GWUl8eI&#x26;list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&#x26;index=22&#x26;ab_channel=BoQian\">Link</a></h2>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">\n    <span class=\"token comment\">// Srtring Stream</span>\n    stringstream ss<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Stream without IO operation</span>\n    <span class=\"token comment\">// read/write of string</span>\n    <span class=\"token comment\">// Example</span>\n    ss <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">89</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\" Hex: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> hex <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">89</span> <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\" Oct: \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> oct <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token number\">89</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&#x3C;&#x3C;</span> ss<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\">//89 Hex: 59 Oct: 131</span>\n\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">;</span>\n    string s1<span class=\"token punctuation\">;</span>\n\n    ss <span class=\"token operator\">&#x3C;&#x3C;</span> hex <span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Formatted input works token by token, spaces, tabs, newlines</span>\n        <span class=\"token comment\">//a == 137</span>\n    ss <span class=\"token operator\">>></span> s1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// s1: \"Hex:\"</span>\n    ss <span class=\"token operator\">>></span> dec <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span> <span class=\"token comment\">//b==59</span>\n    \n    ss<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ss<span class=\"token operator\">>></span> oct <span class=\"token operator\">>></span> c<span class=\"token punctuation\">;</span> <span class=\"token comment\">//c==89</span>\n</code></pre>\n<p>Recommendation: <code>stringstream</code> is used in the example above for input and output but this fucntionality is also offered by two other stream class.</p>\n<ul>\n<li><code>ostringstream</code>: Used only for formatted output</li>\n<li><code>istringstream</code>: Used only for formatted input</li>\n</ul>\n<p>It is recommended for readibility that we use the streams mention above, because they portray our intention for the given stream.</p>\n<h2 id=\"enable-streaming-for-your-own-class-link\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#enable-streaming-for-your-own-class-link\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Enable Streaming for Your Own Class: <a href=\"https://www.youtube.com/watch?v=MefRKIml_1w&#x26;list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&#x26;index=23&#x26;ab_channel=BoQian\">Link</a></h2>\n<p>Description: Class of <code>Dog</code> allows for IO Stream creating and outputing formatted data.</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//Creating Stream-enabled Class</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> age_<span class=\"token punctuation\">;</span>\n        string name_<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Input Stream</span>\n    ostream<span class=\"token operator\">&#x26;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&#x26;</span> sm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Dog<span class=\"token operator\">&#x26;</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        sm <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"My name is \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> d<span class=\"token punctuation\">.</span>name_ <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\" and my age is \"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> d<span class=\"token punctuation\">.</span>age_ <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sm<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Output Stream</span>\n    istream<span class=\"token operator\">&#x26;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&#x26;</span> sm<span class=\"token punctuation\">,</span> Dog<span class=\"token operator\">&#x26;</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        sm <span class=\"token operator\">>></span> d<span class=\"token punctuation\">.</span>age_<span class=\"token punctuation\">;</span>\n        sm <span class=\"token operator\">>></span> d<span class=\"token punctuation\">.</span>name_<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sm<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Dog d<span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Universal Initialization from c++11</span>\n        cout <span class=\"token operator\">&#x3C;&#x3C;</span> d<span class=\"token punctuation\">;</span>\n\n        cin <span class=\"token operator\">>></span> d<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5 carl [Input]</span>\n        cin <span class=\"token operator\">&#x3C;&#x3C;</span> d<span class=\"token punctuation\">;</span> <span class=\"token comment\">//My name is carl and my age is 5 [Output]</span>\n    <span class=\"token punctuation\">}</span>\n\n</code></pre>\n<hr>\n<h2 id=\"backlinks\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#backlinks\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Backlinks</h2>\n<ul>\n<li><a href=\"/notes/notes/2yA501ntEdXEMxKAJrL7o\">C++</a></li>\n</ul>","noteIndex":{"id":"rg4icNT5Vsmg1EL6OA9St","title":"Root","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[],"anchors":{"welcome-to-dendron":{"type":"header","text":"Welcome to Dendron","value":"welcome-to-dendron","line":7,"column":0,"depth":1},"lookup":{"type":"header","text":"Lookup","value":"lookup","line":11,"column":0,"depth":2}},"fname":"root","updated":1639763415274,"created":1639763368541,"parent":null,"children":["3NyZZxlIgyYkAdFspeaa7","fTtWJ5vX5IBeAzAUYdPP7"],"data":{},"contentHash":"adc56c2bec61fcefc1ea6061cf31f063","custom":{"nav_order":0,"permalink":"/"},"body":"# Welcome to Dendron\n\nThis is Richard Landingpage\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":4,"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/notes","siteUrl":"https://www.richardhg.com/","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Personal knowledge space","siteLastModified":true,"gh_edit_branch":"main","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true}}},"__N_SSG":true}