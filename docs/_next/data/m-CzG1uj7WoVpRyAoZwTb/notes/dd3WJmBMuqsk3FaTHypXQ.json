{"pageProps":{"note":{"id":"dd3WJmBMuqsk3FaTHypXQ","title":"C++V11","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[{"from":{"fname":"Proggramming Language.C++","vaultName":"vault"},"type":"backlink","position":{"start":{"line":8,"column":3,"offset":101},"end":{"line":8,"column":39,"offset":137},"indent":[]},"value":"Proggramming Language.C++.C++V11"}],"anchors":{"c-11-link-to-video":{"type":"header","text":"C++ 11 Link to Video","value":"c-11-link-to-video","line":9,"column":0,"depth":2},"initializer-list":{"type":"header","text":"Initializer List","value":"initializer-list","line":13,"column":0,"depth":3},"uniform-initialization":{"type":"header","text":"Uniform Initialization","value":"uniform-initialization","line":49,"column":0,"depth":3},"auto-type":{"type":"header","text":"Auto Type","value":"auto-type","line":95,"column":0,"depth":3},"foreach":{"type":"header","text":"foreach","value":"foreach","line":124,"column":0,"depth":3},"nullptr":{"type":"header","text":"nullptr","value":"nullptr","line":153,"column":0,"depth":3},"enum-class":{"type":"header","text":"enum class","value":"enum-class","line":169,"column":0,"depth":3},"static-assert":{"type":"header","text":"static assert","value":"static-assert","line":200,"column":0,"depth":3},"delegating-constructor":{"type":"header","text":"delegating constructor","value":"delegating-constructor","line":210,"column":0,"depth":3},"constexpr":{"type":"header","text":"constexpr","value":"constexpr","line":236,"column":0,"depth":3},"new-string-literals":{"type":"header","text":"New string literals","value":"new-string-literals","line":261,"column":0,"depth":3},"keyword-final":{"type":"header","text":"Keyword final","value":"keyword-final","line":276,"column":0,"depth":3},"keyword-delete":{"type":"header","text":"Keyword delete","value":"keyword-delete","line":288,"column":0,"depth":3},"keyword-default-for-default-constructor":{"type":"header","text":"Keyword default (for default constructor)","value":"keyword-default-for-default-constructor","line":309,"column":0,"depth":3},"keyword-override-for-virtual-function":{"type":"header","text":"Keyword override (for virtual function)","value":"keyword-override-for-virtual-function","line":328,"column":0,"depth":3},"lambda-function":{"type":"header","text":"Lambda Function","value":"lambda-function","line":360,"column":0,"depth":3}},"fname":"Proggramming Language.C++.C++V11","updated":1639771075501,"created":1639771031461,"parent":"2yA501ntEdXEMxKAJrL7o","children":[],"data":{},"contentHash":"70e677e054cb95fee31c341ba3e0d768","custom":{}},"body":"<h1 id=\"cv11\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#cv11\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>C++V11</h1>\n<h2 id=\"c-11-link-to-video\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#c-11-link-to-video\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>C++ 11 <a href=\"https://www.youtube.com/watch?v=U6mgsPqV32A&#x26;t=23s&#x26;ab_channel=BoQian\">Link to Video</a></h2>\n<blockquote>\n<p>This are notes taking from videos in BoQian Channel, for learning purpose.</p>\n</blockquote>\n<h3 id=\"initializer-list\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#initializer-list\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Initializer List</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">\n<span class=\"token comment\">//C++ 03 initializer list:</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// C++ 11 extended the support </span>\nvector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Calling initializer_list constructor</span>\n<span class=\"token comment\">// All the relevant STL containers have been updated to accept initializer_list.</span>\n\n</code></pre>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Define your own initializer_list constructor:</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&#x3C;initializer_list></span></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BoVector</span> <span class=\"token punctuation\">{</span>\n   vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> m_vec<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n   <span class=\"token function\">BoVector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> initializer_list<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>initializer_list<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator itr <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> itr<span class=\"token operator\">!=</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> itr<span class=\"token punctuation\">)</span>\n         m_vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>itr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nBoVector v <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nBoVector v<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// effectively the same</span>\n\n</code></pre>\n<h3 id=\"uniform-initialization\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#uniform-initialization\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Uniform Initialization</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">\n<span class=\"token comment\">// C++ 03</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>     <span class=\"token comment\">// Aggregate class or struct</span>\n   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n      <span class=\"token base-clause\"><span class=\"token keyword\">int</span> <span class=\"token class-name\">age</span></span><span class=\"token punctuation\">;</span>\n      string name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nDog d1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Henry\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Aggregate Initialization</span>\n\n<span class=\"token comment\">// C++ 11 extended the scope of curly brace initialization</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n      <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">,</span> string name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nDog d1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Henry\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\n</code></pre>\n<p>Uniform Initialization Search Order(Compiler):</p>\n<ol>\n<li>Initializer_list constructor</li>\n<li>Regular constructor that takes the appropriate parameters.</li>\n<li>Aggregate initializer.</li>\n</ol>\n<p>Example:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">Dog d1<span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n   <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>                                <span class=\"token comment\">// 3rd choice</span>\n\n   <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                            <span class=\"token comment\">// 2nd choice</span>\n      age <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> initializer_list<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&#x26;</span> vec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 1st choice</span>\n      age <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      \n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"auto-type\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#auto-type\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Auto Type</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vec <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// C++ 03</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator it <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">!=</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> it<span class=\"token punctuation\">)</span>\n    m_vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// C++ 11: use auto type</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">!=</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> it<span class=\"token punctuation\">)</span>\n    m_vec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">auto</span> a <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// a is a integer</span>\n<span class=\"token keyword\">auto</span> b <span class=\"token operator\">=</span> <span class=\"token number\">9.6</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// b is a double</span>\n<span class=\"token keyword\">auto</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// c is an integer</span>\n\n<span class=\"token keyword\">auto</span> <span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// int const x = a</span>\n<span class=\"token keyword\">auto</span><span class=\"token operator\">&#x26;</span> y <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>        <span class=\"token comment\">// int&#x26; y = a</span>\n\n<span class=\"token comment\">// It's static type, no run-time cost</span>\n<span class=\"token comment\">// It also makes code easier to maintain.</span>\n\n<span class=\"token comment\">// 1. Don't use auto when type conversion is needed</span>\n<span class=\"token comment\">// 2. IDE becomes more important</span>\n\n</code></pre>\n<h3 id=\"foreach\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#foreach\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>foreach</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">\n<span class=\"token comment\">// C++ 03:</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator itr <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> itr<span class=\"token operator\">!=</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span> itr<span class=\"token punctuation\">)</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>itr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// C++ 11:</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// works on any class that has begin() and end()</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> i <span class=\"token punctuation\">;</span>    <span class=\"token comment\">// readonly access</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span><span class=\"token operator\">&#x26;</span> i<span class=\"token operator\">:</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// changes the values in v</span>\n   <span class=\"token punctuation\">}</span>                       <span class=\"token comment\">// and also avoids copy construction</span>\n\n   <span class=\"token keyword\">auto</span> x <span class=\"token operator\">=</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Same as: int x = v.begin();</span>\n\n   <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">auto</span> y <span class=\"token operator\">=</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// y == 3</span>\n   <span class=\"token keyword\">auto</span> z <span class=\"token operator\">=</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// z == 5</span>\n   <span class=\"token comment\">// How this worked? Because begin() and end() are defined for array.</span>\n   <span class=\"token comment\">// Adapt your code to third party library by defining begin() and end()</span>\n   <span class=\"token comment\">// for their containers.</span>\n\n</code></pre>\n<h3 id=\"nullptr\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#nullptr\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>nullptr</h3>\n<blockquote>\n<p>To replace NULL in C++ 03</p>\n</blockquote>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"foo_int\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"foo_char*\"</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Ambiguity</span>\n\n   <span class=\"token comment\">// C++ 11</span>\n   <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// call foo(char*)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"enum-class\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#enum-class\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>enum class</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"> <span class=\"token comment\">// C++ 03</span>\n   <span class=\"token keyword\">enum</span> <span class=\"token class-name\">apple</span> <span class=\"token punctuation\">{</span>green_a<span class=\"token punctuation\">,</span> red_a<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">enum</span> <span class=\"token class-name\">orange</span> <span class=\"token punctuation\">{</span>big_o<span class=\"token punctuation\">,</span> small_o<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   apple a <span class=\"token operator\">=</span> green_a<span class=\"token punctuation\">;</span>\n   orange o <span class=\"token operator\">=</span> big_o<span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> \n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"green apple and big orange are the same\\n\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">else</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"green apple and big orange are not the same\\n\"</span><span class=\"token punctuation\">;</span>\n\n\n   <span class=\"token comment\">// C++ 11</span>\n   <span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">apple</span> <span class=\"token punctuation\">{</span>green<span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">orange</span> <span class=\"token punctuation\">{</span>big<span class=\"token punctuation\">,</span> small<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   apple a <span class=\"token operator\">=</span> apple<span class=\"token double-colon punctuation\">::</span>green<span class=\"token punctuation\">;</span>\n   orange o <span class=\"token operator\">=</span> orange<span class=\"token double-colon punctuation\">::</span>big<span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> o<span class=\"token punctuation\">)</span> \n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"green apple and big orange are the same\\n\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">else</span>\n      cout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\"green apple and big orange are not the same\\n\"</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">// Compile fails because we haven't define ==(apple, orange)</span>\n\n\n</code></pre>\n<h3 id=\"static-assert\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#static-assert\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>static assert</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// run-time assert</span>\n   <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span> myPointer <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Compile time assert (C++ 11)</span>\n   <span class=\"token keyword\">static_assert</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"delegating-constructor\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#delegating-constructor\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>delegating constructor</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// C++ 03:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n   <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n   <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">doOtherThings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/* Cons:\n * 1. Cumbersome code.\n * 2. init() could be invoked by other functions.\n */</span>\n\n<span class=\"token comment\">// C++ 11:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n   <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n   <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">doOtherThings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Limitation: Dog() has to be called first.</span>\n\n</code></pre>\n<h3 id=\"constexpr\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#constexpr\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>constexpr</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//OK</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Compile Error </span>\n\n<span class=\"token comment\">// C++ 11</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>  <span class=\"token comment\">// Forces the computation to happen </span>\n                                 <span class=\"token comment\">// at compile time.</span>\n<span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Create an array of size 6</span>\n\n<span class=\"token comment\">// Write faster program with constexpr</span>\n<span class=\"token keyword\">constexpr</span> <span class=\"token keyword\">int</span> <span class=\"token function\">cubed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">*</span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token function\">cubed</span><span class=\"token punctuation\">(</span><span class=\"token number\">1789</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// computed at compile time</span>\n\n<span class=\"token comment\">//Function cubed() is:</span>\n<span class=\"token comment\">//1. Super fast. It will not consume run-time cycles</span>\n<span class=\"token comment\">//2. Super small. It will not occupy space in binary.</span>\n\n\n</code></pre>\n<h3 id=\"new-string-literals\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#new-string-literals\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>New string literals</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"> <span class=\"token comment\">// C++ 03:</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>     a <span class=\"token operator\">=</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span>  \n\n  <span class=\"token comment\">// C++ 11:</span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>     a <span class=\"token operator\">=</span> u8<span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// to define an UTF-8 string. </span>\n  <span class=\"token keyword\">char16_t</span><span class=\"token operator\">*</span> b <span class=\"token operator\">=</span> u<span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// to define an UTF-16 string. </span>\n  <span class=\"token keyword\">char32_t</span><span class=\"token operator\">*</span> c <span class=\"token operator\">=</span> U<span class=\"token string\">\"string\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// to define an UTF-32 string. </span>\n  <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>     d <span class=\"token operator\">=</span> R<span class=\"token string\">\"string \\\\\"</span>    <span class=\"token comment\">// to define raw string. </span>\n\n\n</code></pre>\n<h3 id=\"keyword-final\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#keyword-final\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Keyword final</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">final</span> <span class=\"token punctuation\">{</span>    <span class=\"token comment\">// no class can be derived from Dog</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n   \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bark</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// No class can override bark() </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"keyword-delete\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#keyword-delete\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Keyword delete</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nDog <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDog <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3.0 is converted from double to int</span>\na <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// Compiler generated assignment operator</span>\n\n<span class=\"token comment\">// preventing the user from using a class different manner</span>\n<span class=\"token comment\">// C++ 11:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n   <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//</span>\n   Dog<span class=\"token operator\">&#x26;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Dog<span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3 id=\"keyword-default-for-default-constructor\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#keyword-default-for-default-constructor\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Keyword default (for default constructor)</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nDog d1<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error: compiler will not generate the default constructor</span>\n\n\n<span class=\"token comment\">// C++ 11:</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Force compiler to generate the default constructor</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n</code></pre>\n<h3 id=\"keyword-override-for-virtual-function\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#keyword-override-for-virtual-function\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Keyword override (for virtual function)</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">\n<span class=\"token comment\">// C++ 03</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Yellowdog</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Created a new function</span>\n   <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Created a new function </span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">// C++ 11</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Yellowdog</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Dog</span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Error: no function to override</span>\n   <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// Error: no function to override</span>\n   <span class=\"token keyword\">void</span> <span class=\"token function\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// Error: not a virtual function</span>\n<span class=\"token punctuation\">}</span>\n\n\n</code></pre>\n<h3 id=\"lambda-function\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#lambda-function\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Lambda Function</h3>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">\ncout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Output: 7</span>\n<span class=\"token keyword\">auto</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;&#x3C;</span> endl<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// Output: 7</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">func</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>func f<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i<span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n         cout <span class=\"token operator\">&#x3C;&#x3C;</span> i <span class=\"token operator\">&#x3C;&#x3C;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   vector<span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Output: 4 5 6</span>\n   <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n   <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span><span class=\"token number\">2</span> <span class=\"token operator\">&#x26;&#x26;</span> x<span class=\"token operator\">&#x3C;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Output: 3 4</span>\n\n\n   <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>  \n   <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Output: 5 6</span>\n   <span class=\"token comment\">//Note: [&#x26;] tells compiler that we want variable capture</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Lambda function works almost like a language extention</span>\n<span class=\"token keyword\">template</span>\nfor_nth_item\n\n</code></pre>\n<hr>\n<h2 id=\"backlinks\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#backlinks\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Backlinks</h2>\n<ul>\n<li><a href=\"/notes/notes/2yA501ntEdXEMxKAJrL7o\">C++</a></li>\n</ul>","noteIndex":{"id":"rg4icNT5Vsmg1EL6OA9St","title":"Root","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[],"anchors":{"welcome-to-dendron":{"type":"header","text":"Welcome to Dendron","value":"welcome-to-dendron","line":7,"column":0,"depth":1},"lookup":{"type":"header","text":"Lookup","value":"lookup","line":11,"column":0,"depth":2}},"fname":"root","updated":1639763415274,"created":1639763368541,"parent":null,"children":["3NyZZxlIgyYkAdFspeaa7","fTtWJ5vX5IBeAzAUYdPP7"],"data":{},"contentHash":"adc56c2bec61fcefc1ea6061cf31f063","custom":{"nav_order":0,"permalink":"/"},"body":"# Welcome to Dendron\n\nThis is Richard Landingpage\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":4,"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"assetsPrefix":"/notes","siteUrl":"https://www.richardhg.com/","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Dendron","description":"Personal knowledge space","siteLastModified":true,"gh_edit_branch":"main","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true}}},"__N_SSG":true}