{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"# Welcome to Richard Notes\n\nCollection of several different notes, related to classes, research, websites, apps and any other type of information I find useful.\n\n<p>&nbsp;<img align=\"center\" src=\"https://github-readme-stats.vercel.app/api?username=rhg101997&show_icons=true&theme=github_dark\" alt=\"rhg101997\" /></p>\n\n## Expectations:\n\n1. This site may contain many grammar errors and other language problems. Since this site is mostly to keep as notes in several topics I do not which to forget or to have faster access to that specific information.\n\n2. Everything here is opinion based, or has been taking from several sources **Which may or may not be trusted**\n\n3. Hopefully as my notes increase it will be helpful to me in the future or someone else. \n\n4. There is not specific order to the documentation included in this site either.\n\n\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Home Page](https://www.richardhg.com/)\n- [Github](https://https://github.com/RHG101997)\n- [About Me](https://tools.richardhg.com/about/)\n","n":0.088}}},{"i":2,"$":{"0":{"v":"Classes","n":1}}},{"i":3,"$":{"0":{"v":"TCN5271","n":1}}},{"i":4,"$":{"0":{"v":"Notes","n":1},"1":{"v":"\n\n\n### Week 1: Introductions\n\n\n\n### Week 2: Recap Networking\n\n####  Trends\n\n**Important**\n\n* Realiazation of Iot advancement came from  microcontrollers, flash storage radio, communication, and sensors.\n* Bell's law: every 10 years new type of computers\n* Cyber-physical: Interaction with the physical world(control)(car)\n* Ubiquitous Computing (Sensor and networks everywhere)\n\n> Next Class(1/27): Come up with other interesting IoT application and IoT devices. (Wierd one) (UWB :) )\n\n**Possible aplications:** medicine, entretainment, enterprises, home, traffic, emergency situation.\n\n* Dedicated short range Comminication(DSRC): vehicle sommunication.(research)\n* Remote control Beetle: US Army studies\n* Soccer: Goal Detection\n* GDPR\n\n#### Characteristics of wireless networks\n\n**Types**: Satellite, WAN, Mobile ad-hoc networks, 1G-5G, UWB ,etc\n\nChallenges OF Wireless Computing:\n\n    1. Wireless Communication\n    2. Mobility\n    3. Poor REsources dure to Portability\n\n\n### Week 3\n\n70% traffic is wireless in the internet\n\n#### Wireless Challenges\n\n1. limited transmission: 10m - 500m\n2. Mosly Limited Bandwith: \n3. Disconnections: Network partition and stall all application.\n4. Security: Easy to intrude in the network\n5. Heterogeneous devices and network connections.\n    * wired links\n    * Outdoor: Radio\n    * Indoor: Infrared\n    * Rural Areas: Satellites\n\n> HW: Measure the data RATE and which standard, cable provider\n\nRG-6 100 MBps\n\nWireless enviroment is not deterministic  or stocastich(performance degragation)\n\nContext-Aware systems: Depends on the context the behavior will change.\n\n#### From QUiz:\n\nActive Network: Aggressive networking\n\n* **Important:** steps of evolution\n\n* Iot is subset of CPS(Cyber-physical systems): False\n\n### Week 4\n\n#### What is Network\n\n* Componets\n* Inter - connecting multiple networks\n* Intra - Within something\n* Core - Medium used for networks to connect(Beltway)\n* ISP - connect regions\n* Miami ISP\n* Protocol - Semantics, timing, syntax\n\n* Current model of the internet of Client-Server\n\n* Peer-to-Peer: Bittorrent\n* Wep3.0\n\n#### Protocol\n\nOSI - Official\nTCP/IP - Defacto(Everyone uses it but is not official)\nSMPT - Simple mail transfer protocol\n\n### Week 5\n\n> Important: Slide 29 (Layer Description) - OverviewNetworking-1\n> Ethernet: today is star topology\nEthernet std. (20-30) revisions\n\n1. **Data link:** responsability of transferring datagram from one node to adjacent node over a link.\n    * Services: Framing, reliable delivery, flow control(pacing), **error detection, error correction**, Half duplex, full duplex.\n    * MAC medium access control -> channel partition, random access, taking turn\n    * CSMA - Carrier Snese Multiple Access\n        * Propagation delay: Time it takes signal to spread over a share medium.\n        * Transmission delay: Time it takes to put data into the share medium.\n    * CSMA/CA(Collition avoidance) - WiFi, wireless technology\n    * CSMA/CD (Collition Detection) - Ethernet\n    * CRC: Cyclic Redundancy Check\n    * ARP: Helps finding link layer address\n\n2. **Network(Routing) layer**: Helps routing from network to network, not end-to-end\n    * Forwarding: passing interface to interface  in router itself.\n    * Routing: detrmine route taken , from source to destination\n    * Routing algorithms: finds least cost path\n        * Global or decentralized  / Static or dynamic\n        * Dijkstra's algorithm(centralized)\n        * Distance Vector (Decentralized)\n        * Routing Portocols: RIP, OSPF, BGP, EIGRP and IS-IS.\n\n3. **Transaport layer:** end-end(E2E), port numbers\n    * System ports or Well-know: 0-1023\n\n\n### HW 1\n\n1. (9pts) Provide names and brief descriptions for one protocol at MAC, network and application layers which are specifically designed for Internet-of-Things.\n\n    **MAC Layer:** LoRaWAN is a Access Contorl (MAC) protocol used for wide area network, which it is used in conjuction with LoRa to transamit signals for very large distances in the magnitude of miles. The difference betweem LoRa and LoRaWAN is that like we specified before LoRa is a methods of  transmisttin signals which makes it a layer 1 on the OSI model, while LoRaWAN is the protocol used for point to point communication which is a layer 2 protocol.\n\n    **Network Layer**: CARP (Channel-Aware Routing Protocol) \n\n    **Application Layer:** Message Queuing Telemetry Transport (MQTT) works on top of TCP/IP layer, it was design to be used on low power consumption devices and helps with unreliable communcation in networks. It uses a subscriber, pusblisher and broker model\n\n\n2. (12pts) Describe the following: Propagation Delay, Transmission Delay, Queuing Delay, and Throughput. \n\n    **Propagation Delay**: The delay for a signal to propagte/travel thorugh a medium, good example of this time takes for WiFi signal to move thorugh air to reach other terminal.\n\n    **Transmission Delay**: The delay for a data packet to be put into the transmission link or the physical layer.\n\n    **Queuing Delay**: This delay is results of the packet arriving to a router network interface and waiting for its turn to be forwared to the next network interface.\n\n    **Throughput**: When refering to Throughput we are refering to the amount of that successfully sent to other network interface. Normally will be measured in bits, megabytes, and gigabytes per seconds.\n\n3. (12pts) Discuss the difference between Internet-of-Things, Wireless Sensor Networks and Cyberphysical Systems.\n\n    **Internet-of-Things:** \n    **Wireless Sensor Networks:**\n    **Cyberphysical Systems:**\n\n\n4. (12pts) In CSMA/CD, after the fifth collision, what is the probability that a node chooses K = 3? The result K = 3 corresponds to a delay of how many seconds on a\n10 Mbps Ethernet?\n\nhttps://gateoverflow.in/132269/Networking-kurose-ross\n\n5. (12pts) Explain the process for how MAC addresses are created by IEEE and assigned to physical devices.\n\n\n\n\n6. (12pts) Compare IPv4 and IPv6 headers in terms of fields and bit size. And then find out what is the percentage of routers on Internet core which still does not support\nIPv6.\n\n\n\n7. (12pts) What is the difference between ”source routing” and ”distance vector” routing? Explain your answer.\n\n\n\n8. (12pts) Consider a broadcast channel with N nodes and a transmission rate of Rbps. Suppose the broadcast channel uses polling (with an additional polling node) for multiple access. Suppose the amount of time from when a node completes transmission until the subsequent node is permitted to transmit (that is, the polling delay) is dpoll. Suppose that within a polling round, a given node is allowed to transmit at most Q bits. What is the maximum throughput of the broadcast channel?\n\n\n\n\n9. (7pts) What is an RFC? Go to IETF web site and find the first and last RFC on TCP. List their names and RFC numbers.\n\n\n\n### Week 6\n\n#### Quiz 2 \n\nFull Mesh: every node is connected to every node\n\n#### Layer 1\n1. Transmission Fundementals\n    * Relaying Information: Electrogmagnetic Signal\n    * Signal:\n        * Function of time\n        * 3 Componets: Amplitude, frequency, Phase\n        * Sine wave\n        * Analog(no breaks in the signal or continuos) or Digital(discrete signal intensity)\n        * Wavelength: distance ocuppied by 1 cycle\n    * Effects of Signal:\n        * Attenuation: lose power, lower amplitude\n        * Distortion: Interference  of defferent frequencies components(Interference: Block the path of, disruption.)\n        * Noise: The absence of signal, there is random mix of frquencies on the channel called noise.\n        * Error: When combined with noise, can lead to bits been changed causing an error.\n    * Spectrum: range of frequencies a signal contains\n    * Bandwidth: Width of the scpectrum, increasing the bandwith makes the wave look more like a square\n        * Increasing bandwith reduce distortion.\n    * Channel Capacity: Maximun rate at which data can be transmited over a given path.(C=2B log(M)) B = Bandwith, M = Voltage levels, C = Channel capacity\n    * **important** SNR: (Signal Nooise Ratio) Signal/Noise Power (represented by decibels)\n        * SNR = 10log10(signal.pow/noise.pow)\n    * Digitial signals can only propagate thorugh wired mediums. So we need to convert Digital-to-analog.   \n    * Modem: modulator, demodulator\n    * Encoding(Modulation of analog to digital):\n        1. ASK Amplitude shift keying\n        2. FSK Frequency shift keying\n        3. PSK Phase shift keying\n    \n    > QAM: modulation technique\n\n    * Analog to digital\n        * Modulation will help to provide frequency devision multiplexing\n        * AM Amplitude Modulation\n        * FM Frequency Modulation\n        * PM Phase Modulation\n    * Digitization: convert analog data into digital signals (slide 12)\n        * Pulse Code Modulation (PCM)\n        * Delata Modulation (DM)\n    * Multiplexing\n        * Carrying multiple signals in one medium\n        * FDM Frequency Devision Multiplexing\n        * TDM Time Devision Multiplexing\n    * Transmission Media for Signals\n        * Guided media: Solid media such as copper, optical fiber, etc.\n        * Unquided: Atmosphere, outer space: Wireless transmission\n    * General Frequency Ranges:\n        * UHF Ultra high frequency\n    * FCC Federal Communication Commission\n        * Regulate the interstate and international communications.\n        * Prevent interferences between different devices.\n        * Spectrum Allocation\n\n\n2. Radio Basics:(RF)\n    * Radio Waves\n        * 3KHz to 300 GHz\n        * Easy to generate\n        * Penetrate buildings\n        * Omnidirectional\n    * All signals are converted to analog\n    * Antenas:\n        * Electrical conductor(radiates/transmits) electromagnetic waves into space\n        * Radiation Pattern of an Antenna\n            * Radiates in all direction(ideal case)\n            * ISOTROPIC(Omni-directinl radiation pattern in 3D) - sun is the best example\n            * Real antennas are not isotropic\n            * Usually in 2D donut\n            * Dipoles (half-wave) and Quarter wave dipoles\n    * Directional Antenneas\n        * Directional are very common, often based on stations\n        * Beam width: measure of directivity antenna\n        * Antenna gain: Power output, in a particular direction, compared to pefect omnidirectional.(measure in dBi) ![antenas dBi](https://www.ahsystems.com/EMC-formulas-equations/images/Antenna-gain-dBi.png)\n        * Types Examples: Isotropic, Omni DIrectional, Yagi Dish.\n    * Radio Propagation\n        ![Radio Propagation](https://image.slidesharecdn.com/lectureu1u2wirelesstransmission-151115072403-lva1-app6892/85/wireless-transmission-12-320.jpg?cb=1447572373)\n        * Transmission Range: Communication possible and low error rate.\n        * Detection range: no communication possible, detect the signal\n        * Interefence Range: signal may not be detected, adds noise from background\n    > Higher frequency travel less\n    * Propagation: \n        * Ground wave: Freq: 2MHz, contour  of earth, AM Radio\n        ![ground wave pro](https://7am0d.weebly.com/uploads/1/3/6/7/13675140/7432717.png?1)\n        * Sky Wave: Travel thousans of kilometers, reflected from ionessphere and earth's surface, Military Comm\n        ![Sky wave pro](https://7am0d.weebly.com/uploads/1/3/6/7/13675140/1701360.png?1)\n        * Line of Sight: Freq: 30MHz \n        ![Line of Sight(LOS)](https://7am0d.weebly.com/uploads/1/3/6/7/13675140/8792977.png?1)\n    * Impairments in LOS Transamission:\n        * The signal recieved is different the signal transmitted.\n        * Coomon Imparments: noise, thermal noise, free space loss, multipath propagation, fading, Reflection, Scattering, Shadowing, Diffraction\n        * Reeiving power of he signasl depends on these  factors.\n    > Important\n    * Fading: Varaition of recieved signal power caused by changes in the medium or path.\n         * Causes: Free sapce loss, multipath propagation(reflection,scattering, ...), mobility, atmospheric absorption, interference.\n         * Mobile envrioments creates more complex effects.\n    \n    * Free Space Loss: Any type of signal disperses with the distance as signal is being spread over larger and larger area.\n        * Equation: ![](https://www.radartutorial.eu/01.basics/formel/rb55(3).print.png)\n        * K*1/f^2d^2\n    * Multipath Propagation:\n        * Reflection: signal encounters a surface that is large relative to wavelength of the signal\n        * Scattering: Incoming signal hits an object whose size in the order of the wavelength if signal or less.\n        * Diffraction: edge of impenetrable body that is large enough  compared to the wavelength\n        * Refraction: Bending of radio waves as they propagate thorugh the atmophere.\n    * Mobility effects:\n        * As user moves, signal paths may chnage.\n        * Fast Fading (ends like a noise, move half the wavelenght) and slow fading(move larger that wavelegnth)\n        ![Fast and slow fading](https://www.rfwireless-world.com/images/fast-fading-vs-slow-fading.jpg)\n    * Spread Spectrum(transmit in wider freq.)\n        * Motivation : wider bands the signals can be wiped out.\n        * Solution: wider bandwidth, transmit many different frequencies.\n        * Initial Motive: Prevent jamming for military applications\n        * Used in every wireless networks today. Multiple transmitters can transmit at the same freq range.\n    * Frequency Hopping Spread Spectrum(FHSS)\n        * Multiple base freq(channels)\n        * randomlly hops to one of thoses\n        * Recviever should do the same\n        * SPreading code = Hoping Sequence\n        * Fast Hopping(several freq per bit), and slow Hopping(several bit per freq)\n            * dewll time: stick with that feq\n            * bit period: time to stay on a bit\n    * Spread code: predefine sequences\n    * Direct Sequence Spread Spectrum(DSSS) \n        * Each bit in orginal signal  is represented by multiple bits in the transmitted signal\n        * Very resilient to interference\n        * Transmitted signal is code CHIP\n        * Multiple users can share the bandwidth, using differen chipping.\n\n3. Hardware\n    * Example: Sensor, actuators, etc\n    * Components: Sensor, IO, Controller Radio, Power unit\n    * ADC in IO = Analog to digital converter\n    * Actuation = taking a physical action\n    * Mobilizer = ability to move, flying like drones, it requires additional hardware\n    * Location finding system: GPS, or location tech\n    * Requirements of the application are design decision(size, energy, cost, sensors/actors)\n    * Controller:\n        * Factors: # of transistors(size, cost, power), # clock cyles(power), time to develop(acceptance), nonreccurring enginerring cost (NRE)(cost, acceptance)\n        * Ideal minimize all factors at the same times.\n        * CPU: Central Proccessing Unit of the device\n        * Different architectures:\n            * Mircocontroller(MCU): resource contranted, sofware controlled, general purpose\n            * Digital Proccessor(DSP): Proccess large data streams, parallelizing.\n            * Field-Proggrammble Gate Arrays(FPGA): Special harware, expensive, limited configuration\n            * Application-Specfific Integrated Circuits(ASIC): Special hardware designed only for one application, possible embedding several MCU or DSP cores. \n\n> HW1: Source Routing(know the whole path)  vs Distance Vector(only know the neighbor distance)\n> Source: Does routing computation before sending, nobody keeps other information.\n\n\n4. MAC for Wireless Enviroments\n    * What is MAC: open, brodcast medium, limited bandwidth, multiple user\n    * MAC Protocols: Multiple Access Control, Medium Access, or Media Access\n    * Expected from MAC Protocol: limted delay, high throughput, fairness, scalability, stability, low power consumption. QoS, robustness agaisnt channel fading\n    * Problems: Half duplex,Packet Loss, location depended, limted battery time, Time Varying Channel,\n    * Causes energy waste: Collision, Control packet overhead, overhearing unnecessary traffic, Long Idle time (**Dominat Factor**)\n    * _Important_ Random Access PRoblem: Hidden and Exposed terminal\n    * Distributed and Centralized MAC Protocol\n\n5. Wireless LAN Standard (802.11 - 1999)\n    * Provides a MAC and Physical functionality\n    * Frequency allocation: alll user must operate on a common freq. band\n    * Inference and reliability: Collision, Security, Power cons., Human safety, Mobility\n    * Std today: 802.11ac Max: 1300 Mbps OFDM/QAM\n    * 5 GHz\n    * MIMO Multiple Input and MUltiple output\n    * Two Operational Modes: \n        * Infratructure Mode\n            * BBS Basic Service Set\n            * Extended Service set (ESS)\n        * Ad-hoc: IBSS Independent Basic Service Set\n    * CSMA/CA with ACK\n    * Wifi solution to exposed and hidden terminal is RTS(Request to send) and CTS(Clear to send)  Virtual Carrier Sensing\n    * RTS 20 bytes and CTS 16 bytes\n    * Contention Window (CW) wait for to be idle to send from 0 to CW\n    * _Important_ You require ACK cz cant detect collision \n    * Channel Assigment and Regiistration:\n        * Roaming: moving from access point to others. Re-Association\n    * Other issures: Fragmentation, Synchronization, Power Management, QoS for Voice Packets\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n---\nTo be Continued\n\n","n":0.021}}},{"i":5,"$":{"0":{"v":"EEL6787","n":1}}},{"i":6,"$":{"0":{"v":"Notes","n":1},"1":{"v":"\n\n# EEL 6787 Network Security\n\n\n\n## Chapter 8 Intrusion Dection\n\n#### Types:\n* Cybercriminals: hackers, cracker, organized groups for money, identity theft, credentials, etc\n* Activist: Motivated social polictica issue, DoS attacks, theft, negative publicity.\n* State sponsored organization: hackers sponsored by government for (APT)\n* Others: other motivations\n* Apprentice: use toolkits\n* Journeyman: Modify and extend attack  toolkits\n\n> Examples of Intrusion: defacing webserver, copying database, sniffing to capture credentials,  posing, etc\n\n#### Intruder behavior\n\n* **Target Acquisition and Information gathering:**  public,technical, network exploration\n* **Intial Access**: remote vulnerabilities, guess passwords, malware isntallation\n* **Privilage Escalation**: local root access\n* **Information Gathering or System Exploit**: scan files, transafer data outside\n* **Maintaining Access**: installation backdoor\n* **Covering Tracks**: desible logs, hide files\n\n**Security Intrusion** event when intruder gets access or attemps.\n\n### Intrusion Detection System(IDS)\n\n#### 3 logical Componets:\n\n1. Sensors: data collection\n2. Analyser: out if intrusion\n3. User Interface: output, control\n\n#### Location of IDS:\n\n1. Host-Based IDS(HIDS): single host\n2. Network-Based IDS(NIDS): network segments, tarffic\n3. Distrubuted or hybrid IDS: combines both, central analyser, multiple sensors\n\n#### Threads types: \n\n1. Masquerader: false identity\n2. Misfeasor: legit user, not authorized\n3. Clandestine user: covering action by delteting logs\n4. Port Scans: inforamtion gathering for TCP connections\n5. DoS attacks\n6. Malware Attacks\n7. ARP spoofing\n8. DNS cashe poisoning: changing DNS cache\n\n\n#### IDS Componets: \n* IDS manager: compiles data to detect intrusion , determination based on site policies. Detects and sound Alarm\n\n#### IDS Requirements\n\n1. Run continually\n2. Fault tolerant\n3. Resist subversion\n4. Impose a minimun overhead\n5. Configure accourding to policies\n6. Scale\n7. Degradation Services\n9. Allow Dynamic re-configuration\n\n#### Analysis Approach\n\n* **Anomaly Detection**: whether behavior is legit or intruder. Done by collecting data of legit user. Classification Approach for Detection:\n\n1. Statistical: analysis of univariate, multivariate, or time-series model.\n2. Knowledge base: by observed behavior accourding to set of rules\n3. Machine Learning: automatic based on traning data\n\n* **Signature/Heuristic Detection**: Malicious data patterns or attack rules and compared to current behavior. Approaches:\n\n1. Match large colletion of know patterns agasint traffic\n2. Signatures need to be large to decrease false alarms rate, still detect large fraction of malicious data.\n3. Anti-virus, network scanning proxies or NIDS.\n\n* **Rule-based Heuristic Identification**: \n\n1. Use rules identify know exploits\n2. rules used are specific\n3. Rules for Identify suspicious behavior\n\n\n#### Base-Rate Fallacy\n> base-rate fallacy: probability of some conditional event is assessed without considering the \"base rate\" of that event\nIDS needs to: most intrusion with few false alarms.\n* to few intrusion -> false security\n* to many false alarms -> waste of time\n\n### Host-Based Intrusion Detection (HIDS)\n\n* Monitor activity \n* Halt attacks before damage is done\n* Detect internal and external Intrusion\n\n#### Sensors of HIDS:\n\n1. System call traces\n2. Audit(log): user activity\n3. File integrity checksums: (difficult to monitor files, and need generate checksum for every file)\n4. Registry access\n\n### Network-based Intrusion Detection (NIDS)\n\n* Monitor traffic selected points\n* Traffic packet examination in real time\n* Examine Protocol Activities\n* Analysis of traffic patterns by sensors or both\n\n#### Sensors in NIDS\n\nThey can be deployed in two mode:\n1. Inline: traffic most pass through the sensor\n2. Passive: monitos a copy of the traffic\n\n### Stateful Protocol Analysis(SPA)\n\n* Subset of **anomaly detection** compared observed vs predetermine universal vendor supplied profiles. Key disadvantage is the high resources usage it requires.\n\n### IETF Intrusion Dectection Working Group\n\n* Define data formats and exchange procedures for sharing information.\n\n### Honeypots\n\n* System is filed with fabricated data with no value to user.\n\n1. Divert atacker from critical systems\n2. Collect information about attacker activity\n3. Encourage attacker to stay longer.\n\n#### Low Interaction Honeypots:\n\n* Emulate an IT service or system, but doesn't execute full version.\n* Less realistic Target\n* Sufficient as componet of IDS to warn of attack\n\n#### High Interaction Honeypots:\n\n* Real system, full OS with services and app\n* Realistic target\n* Use more resources \n* If compromised can be use to attack the system\n\n#### Honeypots Locations\n\n* Outside the external Firewall: tracks attemps to connect to IP within scope fo network. Reduces the alerts issued by firewall and internal IDS. Disadvantages little ability to trap internal attacker, mainly if firewall blocks traffci both directions.\n* Network of externally avaible services(email, web) called DMS(`Demilitarized zone`) other systems are secure by the activity generated by the Honeypot. Disadvantage DMZ not fully accessible, firewall blocks traffic from DMZ and unneed services. Solution Opening up firewall but increase risk of attack.\n* Fully internal, which can catch internal attacks and Detects misconfigured firewalls. Disadvantage if compromised can attack internal system. Also configuring firewall to allow traffic to honeypot potentially increasing risk, and configuration mistakes.\n\n### Snort\n\nOpen source, configurable, protable host-or-network based IDS.Lightweight. Perform real time package analysis can capture, also content matching:\n\n* Easy to deploy\n* Efficient operation\n* Easy configure\n\nIntallation consist of 4 logical components:\n\n1. Packet decoder\n2. Detection engine\n3. Logger \n4. ? **Search later**\n\n\n## Chapter 9 Firewalls and Intrustion Prevention Systems\n\n\n### Firewalls\n**Firewall**: prevent access of unauthorized electronics to networks.\n\n#### Design Goals: \n\n1. All traffic must pass thorugh it, physically blocking all access\n2. Authorized traffic define by local policy.\n3. Imune to penetration.\n\n#### Firewall Policies\n\nFilter incoming and outgoing traffic based on set of rules. types of traffic, address ranges, protocols, application, and content type\n\n#### Policy Action:\n\n1. Accept: allow pass\n2. Dropped: not allow, no alarm\n3. Rejected: not allow, sound alarm\n\n#### Approuches for firewall\n\n* Blacklist: all package allowed except from one on list\n* Whitelist: (default) all packages blocked except the one on list\n\n#### Firewall Filter Characteristics\n\n1. IP address and protocol values\n2. Apllication Protocol\n3. User identity\n4. Network activity\n\n#### Firewall Capabilities and Limits\n1. Single choke point\n2. location for monitoring security related events\n3. IPsec, tunnel mode to implement VPN\n4. Can't protect agasint attack that bypass firewall\n5. May not protect agaisnt internal attacks\n6. Can't guard agaisnt misconfigured wireless LAN\n7. Inffected devices can infect the network\n\n#### Firewall Type: \n\n1. Packet filter(**Stateless**): matches  a set of rules.\n2. **Statefull** filters: records all connection, and determine, new,existing, etc\n3. Application-proxy: inspect content of traffic, blocking what consider inappropiate\n4. Circuit Level proxy\n\n#### Stateless \n\n* Advantages of Packet Filtering: simplicity, transaparent to user, very fast.\n* Weakness of Packet Filtering:\n1. Can't prevent application specific vulnerability\n2. Logging functionality is limited\n3. No support Advance user authentification schemes\n4. vulnerable to attacks and exploits of TCPI/IP\n5. Improper config lead to breaches\n\n**Attacks:**\n\n1. IP address spoofing. Counter measure-> discard packet with inside source address if arrive external\n2. Source routing attack: Countermeasure -> is to discard all packets using this option\n3. Tiny Fragments attacks: Create small packets and force TCP header into different packet fragments. Passing by the firewall rules. Countermeasure -> enforcing rule first fragment  of packet must contain predefined minimun amount of the transaport header.\n\n#### Statefull Inspection Firewall\n\nEntry for each established connection, allowing incoming traffic for those packets that fit profile, of one of the entries.\n\n#### Stateful Firewall\n\nTables containing  data on each active connection, ip, ports, and sequence #. It does similar to packet filter firewall but records TCP connection.\n\n#### Application-Level Gateway\n\nActs as a relay of application-level traffic, User need to athentificate himself. Disadvantages is addtional proccessing overhead on each connection.\n\n#### SOCKS Circuit-Level Gateway\n\nClient-Server applications in TCP/UDP use services of network firewall. Consist of the following components.\n1. SOCKS server\n2. SOCKS client library\n3. SOCKS-ified version, re-linking or re-compilation using SOCKS library to encapsulate the the library.\n\n#### Bastion Host\n\nFirewall Administrator as critical strong point in security. Plataform for application or circuit gateway. Characteristics are:\n1. SSecure version of OS\n2. Essential installed only\n3. Additional Authentification\n4. Support from subset of protocols\n5. Configure for specific host\n6. Eac proxy loggs all traffic and duration of connection\n7. Proxy modeule is very small\n8. Proxy is independent of others\n9. Proxy requires no disk access, besides inital config\n10. Proxy runs as non-root user\n\n#### Host-Based Firewall\n\nModule comes with the OS. Advantages include:\n\n1. Custom Filtering rules\n2. Protection independent from topology\n3. Additonal layer protection\n\n> Personal firewall: deny unauthorized remote access, monitor outgoing traffic to detect and block worms, and malware.\n\n\n### Intrusion Prevention Systems IPS (IDPS)\n\nIPS blocks traffics but uses detection algorithms from IDS to determine when to do so. It can be Host- , Netowrk-, or hybrid.\n\n#### Host-Based IPS (HIPS)\n\n* Signature: focus on content of the application network traffic, sequence, pattern, sys calls, etc\n* Anomaly: IPS checks **behavior** pattern that indicate malware Ex:\n1. Modification of sys resources.\n2. Privilege escalation exploits\n3. Buffer-overflow\n4. Access contact list email\n5. Directory traversal\n\n> A prudent approach is to use HIPS as one of elemnt in the defense.\n\n#### Network-Based IPS (NIPS)\n\n* Can modify or discard TCP connections, may provide flow data protection:\n\n1. Pattern matching\n2. Stateful matching\n3. Protocol anomaly\n4. Traffic anomaly\n5. Statistical anomaly\n\n#### Digital Inmune System\n\nComprhensive defense  agasint behavior casused by malware.Its success depends on the ability of the malware analysis to detect new and innovative malware strains.\n\n#### Snort Inline\n\nmodified version of **Snort**, enhancing it and providing functionality similar to a IPS. Three new rules are added:\n1. Drop: drop based on rule and logs\n2. Reject: rejected, logged, and error returned\n3. Sdrop: rejected but no logged\n\n\n\n## Chapter 6 - Malicious Sofware\n\n* Malware: A program intent of compromising confifentiallity, intergrity  or availability.\n* Adavance Persistent Threat: cybercrime targeted to bussines or political targets.\n* Adware: ads that integrated into sofware\n* AttackKit: tools for generating malware. (Zeus crimeware, Angler)\n* Auto-rooter: Break into new machines remotely\n* Backdoor: access to unauthorized system bypasssing security(Maintenance Hook)\n* Drive-by-Download: code that eploit browser vulnerability to attack\n* Exploits: code specific for single or multiple vulnerabilities.\n* Flooders: generate large volume of data, DoS\n* Keyloggers: record credentials, keystrokes\n* Logic Bombs: Stays dormant until triggerd by event or condition.\n* Macro virus: scripting code attached to documents, can replicate\n* Mobile Code: \n* Root kit: tools after attacke is in system.\n* Spammer programs: large volume of email\n* Spyware: collecs information from several sources\n* Trojan Horse: Appears useful but execute payload in back\n* Virus: When executed replicates it self to other executables\n* Worm: runs independent, can propagate a complete version to other host.\n* Zombie,bot: activate when lunching an attack on other machines.\n\n#### Malware Classification Categories\n\n1. How it propagates\n2. Actions and Payload\n3. Aditionally\n* Need a host program\n* Indpendent, self-contained\n* Don't replicate\n\n**Propagation Mechanism**:\n\n1. Infection of existent content\n2. Exploit sofware vulnerabilities(worms)\n3. Social Engineering attacks.\n\n**Payload actions once in target**\n\n1. Corruption\n2. Theft service/make system zombie\n3. Theft of data (keylogger) \n4. Stealthing/hiding\n\n#### Attack Sources\n\n1. Politically motivated\n2. Criminals\n3. Organized Crime\n4. Organization(selling services)\n5. National Goverment Agencies\n\n#### APTs Characteristics:\n\n* Well resouced\n* State sponsored\n* Advance: dev custom malware\n* Persisten: maximize order of success\n* Threats: increase level of thread\n* Aim: theft, intelectual properties, security,physical disruption\n* Techniques used: social enginerring, spear-pishing, drive-by-download, etc\n* Intent: to infect\n\n#### Virus Characteristics\n\n* Modifies and includes a copy of the virus\n* Replicate into other content\n* Easly spread through networks\n\nPhases of Virus:\n\n1. Dormat: is idle\n2. Triggering: condition or event \n3. Propagation: copy of itself, replicates\n4. Execution: Payload or action\n\nMacro virus: they attack to documents or other media files:\n\n* Plataform independent\n* Easly spread, in traditional file systems\n* easier to write or modify.\n\n#### Virus Classification:\n\n* **By target:** \n1. Boot sector infector\n2. File infector\n3. Micro virus\n4. Multipartite virus: multiple way infecting\n\n* **By concealment**\n1. Encrypted\n2. Stealth\n3. Polymorphic: mutates apparence\n4. Metamorphic: mutates and rewrite himself.  apparence, and behavior\n\n#### Worms \n\n**Worm Replication:**\n\n* Mail, instant msg\n* File sharing\n* Remote execution: execute himself in other system\n* Remote file access or transfer capability\n* Remote login capability\n\n**Worm Target Discovery**\n\n* Scanning (Fingerprint): search system\n* Random: Probes random IP\n* Hit List: list of potential targets\n* Topological: based on information on host\n* Local subnet: own local network\n\n> Morris Worm: 1988 UNIX systems. Exploit UNIX finger protocol, sending emails. First worm\n\n> WannaCry: Ransomware,  scan networks local and random to jump other systems. Encrypts files and ask for ransom to decrypt. UK researcher activated a kill switch. \n\n**State of art Worm tech**\n\n* Multiplataform\n* Multi-exploit\n* Ultrafast-spreading\n* Polymorphic: evade detection\n* Transport vheicales\n* Zero-day Attack: vulnerability not jet discovered\n\n#### Mobile Code\n\nIncluded when running cross-site scripting, interactive and dynamic websites, download from untrusted sofware. Target smartphones, delte data. Also CommWarrior replicates using Bluetooth.\n\n#### Drive by Download\n\n* Exploits browser vulnerabilities and plugins\n* Doesn't actively propagates as regular worms\n* Spreads when visiting websites\n\n**Watering Hole Attacks**:\n* Highly targeted\n* has information on websites victim visit\n* Then wait for them to visit\n* Infect, and takes no action other visitor\n\n#### Malvertising\n\n* Placing malware without comprimising website.\n* targeted websites\n* Dynamically generated reduce detection\n* Stay for as little as few hours\n\n#### Clickjacking\n\n* Lead user to belive they are typing in real UI(redress attack) but there is invisible interface stealing the data.\n* Colecting users clicks\n* Adjust browser setting \n* Place button under legit button\n* routing clicks to another site.\n\n#### Social Engineering\n\n* Spam \n* Trojan Horse\n* Mobile phone trojans\n\n#### Payload System Corruption\n\n1. Chernobyl virus: over write first megabyte with zeros.\n2. Klez: Mass maling, can stop, delte antivirus programs, casue files to become empty\n3. Ransomware: Encrypts data and ask for ransom. \n\n\n#### System Curruption\n\n1. Real-world Damage: cause physical, like changing BIOS like Chernobyl or Stuxnet target industrial\n2. Logic Bomb: embedded code in malware\n\n#### Information Theft\n\n1. Keylogger\n2. Spyware\n\n#### Phising \n1. Mascarading as trusted source\n2. Spear-phising: targeted\n\n#### Stealthing Rookit\n\n* gives root access to attacker\n* Persistent: every time it boots\n* Memory based: cant survive reboot\n* User mode: intercept API calls, returns modified results\n* Kernel Mode: Intercept native API, removel itself from kernel list\n* VM: install it self in VM\n* External Mode: direct access to hardware, BIOS, etc\n\n#### Malware Counter Measure\n\nPrevention\n\n* Policy\n* Awareness \n* vulnerability mitigation\n* Threat mitigation\n\nMitigation:\n\n* Detection\n* identification\n* Removal\n\n#### Anti-virus Generation \n\n1. Simple Scanner\n2. Heuristic Scanners\n3. Activity Traps(identify by action)\n4. Full-featured\n\n#### Sanbox Analysis\n\nRun malware isolated to analyse the beahavior and to better detect in furute\n\n#### Host-based behavior-blocking Software\n\nIt blocks potentially malicious actions before  they have a chance to happen\n\n#### Perimeter Scanning Approuches\n\n* Anti-virus\n* traffic analysis\n* ingress and egress monitoring(wierd behaviors)\n\n\n\n## Chapter 10 - Buffer Overflow\n\nCan occur in Stack, Heap, Data Section of proccess.\n\n**Consequences**:\n\n* Corruption\n* Transfer control\n* Memory Access violation\n* Execution unknown code\n\n#### Attacks \n\n1. Identify vulnerability\n2. How is the buffer been stored\n\n**Fuzzing tool** for identification of vulnerable problems\n\n#### Stack Smashing\n\n* Morris Worm exploits this vulnerability, vulnerable code like gets() fro C language. \n* Uses return address to execute shellcode\n\n#### Shellcode\n\n* Normally used to trasnfer control of the CLI to the attacker with high privilages.\n* Required good assambly skills\n* Metasploit helps create shell code.\n\n#### Stack Overflow Variants\n\n* Targeted: system utility, Program library code(if not static linked), Network Deamon\n* Shellcode Functionality: flush firewall, listening services, remote shell, privilage escalation, backdoor\n\n#### Buffer Overflow Defenses\n\n1. **Compile-Time:** Harden new programs\n * Use modern language: notion of type, not vulnerable BO, higher cost resources, limit usefullness, example creating drivers\n * Safe Coding Techniques: inspect code, rewrite unsafe code, audited existing code base. \n * Language Exntension/Safe Libraries: Handeling memory allocation, safer varients of functions\n * Stack protection: GCC compiler extension(add dummy functions),check for corruption of stack\n2. **Run-Time**: detect and abort attacks, in exsisting programs\n * Executable Address Space Protection: memory non executable\n * Address Space Randomization\n * Guard Page: Flagg MMU as illigal address, any attemp access abort\n\n\n#### Attack: Replacement Stack Frame:\n\nReplace stack frame with a dummy stack frame.\n> Defense: randomization address, stack protection, non executable stack\n\n\n#### Return System Call \n\n* Use retunr addres to execute shellcode\n> Defense: randomization address, stack protection, non executable stack\n\n#### Heap Overflow\n\n* Located in the Heap, dynamic data structures\n* No return address\n* No easy to transafer control\n\n> Defense: Making heap non executable, Randomize address allocation\n\n#### Global Data Overflow\n\n* Attack buffer global data\n* Vulnerable adjesent proccess\n* Overwrite function pointer to later call\n\n> defense: Non executable, move function pointers, guard pages\n\n\n\n## Chapter 11 - Sofware Security\n\n#### Security flaws\n\n5 Security sofware flaws:\n\n1. Unvalidated Input\n2. Cross-Site Scripting\n3. Buffer overflow\n4. Injection Flaws\n5. Improper error handling\n\nNIST Reccommendation:\n\n1. Stop vulnerabilities before they occur\n2. Find vulnerabilities before they can be exploited\n3. Reduce impact of vulnerabilities by resilient architectures\n\n#### Sofware Security, Quality and Reliability:\n\n1. Quality and Reliability: focus eliminate as many bugs possible. concern is not how many bugs but how often they are triggered.\n2. Security : Probability distribution for targeting bugs that result in failure and can be exploited. Triger by input that differ dramatically from what is usually expected.\n\n#### Defensive Programming\n\nNever assume anything, check all assumptions and handle any possible error states.\n\n#### Handling Program Inputs\n\n* Common\n* Input is any source data from outside.\n* Identify all data sources\n* validate size and type\n\n#### Interpretation of program Input\n\n* binary or text, binary depends on encoding\n* Check are character types with care\n* Fail to validate result in vurnerability\n\n**Injection attacks** is by handeling input wrong way, attacker execute code.(scripting languages more often)\n\n#### Cross Site Attack Sctipting (XXS) \n\nInput provided by one user is outputed by another user. Script in HTML Code, perform security checks and restrics data access to pages originating from the same site.\n\n#### Validating Input Syntax\n\nCompare against wanted string, compare input to dangerous values or accepting only know safe data.\n\n#### Alternate Encodings\n\n#### Input Fuzzing \n\nTetsing Technique for tetsing input to program.\n* Handle abnormal inputs\n* Template to genrate of know problems inputs\n\n#### Writing  Safe Program Code\n\n1. Correct algorithms implementation\n2. correct machine instruction for algorithm\n3. Valid manipulation of data\n\n#### Operating System Interaction\n\n1. Programs Execute under OS control(enviroment, variables. shares resource)\n2. System has concepts of multiple users(Lelvel Access, permission, shared,etc )\n\n**Enviroment Variable**: string value inherityed by each proccess.\n\n#### Vulnerable Compiled Programs\n\n* Vulnerable to PATH manupulation\n* Dynamically linked may be vulnerable to manupulation of PATH\n\n#### Preventing Race Conditions\n\n* Use Synchronization mechanism to lock the shared file.\n* `Lockfile` to cooperater in sharing a file\n\n## Operating System Security\n\nASD = Australian Signals Directorate\n\n#### Strategies\n\n* Over **85%** of targeted cyber intrusion by ASD in 2009 could have been prevented.\n* Top 4 Strategy:\n1. White-list\n2. Patch third party app, and OP\n3. Restrict Administrative Priviliges  \n4. Create defense-in-depth system\n* Align with \"20 Critical Controls\" by DHS\n\n#### Operating System Security\n\n1. Risk and plan system deployment\n2. Secure OP and apps\n3. Critical content secured\n4. Appropiate Network protection mechanism\n5. Appropiate proccess are used to maintain security\n\n#### OS Hardening\n\n1. Intall, and Patch OS\n2. Configure OS\n3. Additional Security Controls\n4. Test the Security\n\n#### Data Backup and Archive\n\n* Backup: making copy of data regularly\n* Archive: retaining copies for periods of time\n(online, offline, local, remote)\n\n#### Windows Security \n\n* Biba Integrity Model\n* UAC User Account control\n* Registry for configurations\n* AES using BitLocker encryption file system\n* EFS Encryption File System\n\n#### Virtualization\n\n* abstraction of resources  used by sofware in simulated enviroment\n\n#### Hypervisor\n\n* Resource broker\n* schedule VMs\n* Virtual memory managemnt\n* Context switching\n* emulate networks\n\n#### Securing Virtualization\n\n* Plan, secure all elements\n* Hypervisor properly secure\n* Restric administrator access to VM\n\n#### Hypervisor Security\n\n* SImilar to OS, configure firewall IDS, seperated networks\n\n\n","n":0.018}}},{"i":7,"$":{"0":{"v":"CNT6150","n":1}}},{"i":8,"$":{"0":{"v":"Notes","n":1},"1":{"v":"\n\n## **CNT 6150: Advanced Sensor & loT Data Analysis with Deep learning**\n\n\n\n### Module 1 | Machine Learning Review\n\n1. Install Anaconda (Windows App Manager)\n2. Create Enviroment with desired python packages\n3. Use jupyter notebook to do the assigments\n\n### Module 2 | Introduction to Neural Network","n":0.152}}},{"i":9,"$":{"0":{"v":"CIS5370","n":1}}},{"i":10,"$":{"0":{"v":"Notes","n":1},"1":{"v":"\n\n\n## **CIS 5370: Principles of Cybersecurity**\n\n[Labs Notes](https://users.cs.fiu.edu/~rblazek/SEEDLabs/SEEDLabs2020.html)\n\n\n### Module 1: Cryptography & Key Concepts\n\n\n\n\n\n###  Module 2: Attacks","n":0.25}}},{"i":11,"$":{"0":{"v":"Meeting","n":1}}},{"i":12,"$":{"0":{"v":"Intro","n":1},"1":{"v":"\n\n## Work Ethics \n\nProffesionilsm\nBeing on time\n\nBeing respensive to emails \n\nAny emails\n\n1. Advisor\n2. Any email\n\nWork hours\n1. Try to have schedule\n2. Maintain online calendar\n\nTake ownershihe project.\n\nRecord everything, notes, etc\n\nCleanliness of the lab\n\nFollow up and promise\n\nHoliday breaks, etc.\n\nDon't make any purchase in advance\n\nUse university resources\n\n### Cybersecurity Realm \n\n\n### Research Ethics\n\nPlagiarism\n\nThe most important issue\nDouble submissions is not permitted\n\nNo forging results\nCriticisms\n\n\n### Proffessional Development\n\nGood writing skills\n* Writing for CS\nGood presentation skills\n* Blackhat, TED, other talks\n\n\n\n","n":0.12}}},{"i":13,"$":{"0":{"v":"Website","n":1},"1":{"v":"\n\nAll notes related to my website\n","n":0.408}}},{"i":14,"$":{"0":{"v":"Theme","n":1},"1":{"v":"\n## Chirpy Jekyll theme\n\nThe theme `Chripy` is used on the main page of my site, it is a static website mainly for blogging, uses markdown to create notes and other. But I will use it mostly for the front, and notes will be written only on Dendron.\n\nhttps://github.com/cotes2020/jekyll-theme-chirpy\n\nThis theme is used mostly for proffessional writting, but in my case I just want a canvas to write ideas/code snippets that will be used for me later on. Cheatsheets, tips, and other important information.\n\n### Running Website Locally\n\nDownload and install jekyll using:\n\n\n```console\n$sudo apt-get install ruby-full build-essential zlib1g-dev\necho '# Install Ruby Gems to ~/gems' >> ~/.bashrc\necho 'export GEM_HOME=\"$HOME/gems\"' >> ~/.bashrc\necho 'export PATH=\"$HOME/gems/bin:$PATH\"' >> ~/.bashrc\nsource ~/.bashrc\ngem install jekyll bundler\n```\n\nAnd then execute to install all the gems needed for the theme.:\n\n```console\n$ bundle\n```\n\nTo run the page using docker which is easier and requires less installation run the following in linux:\n\n```\n\n$ docker run -it --rm \\\n    --volume=\"$PWD:/srv/jekyll\" \\\n    -p 4000:4000 jekyll/jekyll \\\n    jekyll serve\n\n```","n":0.08}}},{"i":15,"$":{"0":{"v":"Publish-Notes","n":1},"1":{"v":"\n\n## How to publish my Notes(Remainder):\n\nHere I will save several of the commands that are required to publish my notes to public. Also to get the most up to date notes please `git clone` the repository since the procedure for publishing needs to be performed by a computer that has all the requirements. Explain in the next section.\n\nReferences: [Here](https://wiki.dendron.so/notes/23a1b942-99af-45c8-8116-4f4bb7dccd21/)\n\n### Requirements:\n\n* `Node.js` is required\n* Intallation of `dendron-cli`\n\n```bash\n# intall\nnpm install -g @dendronhq/dendron-cli\n# upgrade\nnpm install -g @dendronhq/dendron-cli@latest\n\n```\n\n* Setup if it is the first time running in this workspace. Initialize dendron-cli\n\n```bash\n# Init nodejs\nnpm init -y \n# install in directory\nnpm install @dendronhq/dendron-cli\n\n# Update .gitignore\necho .next >> .gitignore\n# Clone the nextjs repository and install dependencies\nnpx dendron publish init\n```\n\n\n\n\n### Publishing Commands\n\nFor building and Previewing( `https://localhost:3000`):\n\n```bash\nnpx dendron publish dev\n```\n\n**For publishing we need to run a export with a `github` target:**\n\n```bash\ndendron publish export --target github\n\n# Deployment\ngit add .\ngit commit -m \"dendron page update\"\ngit push\n```\n\nAfter this the website should update in a few seconds.\n","n":0.081}}},{"i":16,"$":{"0":{"v":"Research","n":1},"1":{"v":"\n\n### Research Problem\n* Scientific\n    * Problem with no existing solution\n    * Or the solution is not good\n\n* Mathematical \n    * Optimization\n    * Algorithmic\n    * Proof\n    * Function\n\n* Engineering\n    * Design\n    * Performance evaluation\n\n### Application\n\n* Research problem can be use in a variety of applications\n* Make it fully functional and then commercialize it.\n* Technology level 1-9(search)\n* Adapting your solution to the applications needs or restrictions\n* Building solution not application\n* Adjusting application related ressearch\n\n### Research method\n\n* Different way of solving it\n* These can be different disciplines (research methods)\n* Examples:\n    * Optimization methods\n    * Algorithmic therory\n    * Information Theory\n    * Cryptogrpahy and crypttonalysis\n    * Game theory\n    * MAchine Learning\n    * Social Science Theories\n> novel solutions\n\n### Evaluation Methods\n\n* The way you choose to test your approuches\n* Examples:\n    * Simulation\n    * Emulation\n    * Proof of COncept Implementation\n    * Mathematical Proof\n    * Surveys\n\n\n\n\n","n":0.085}}},{"i":17,"$":{"0":{"v":"Papers-Types","n":1},"1":{"v":"\n\n\n### Types of IEEE Conference Papers\n<br></br>\nIt is important that you understand the different types of conference papers. Depending on the conference, you may be asked to submit one of the following:\n\n* **Abstract:** Synopsis of your research (250 words or less)\n* **Extended abstract:** High-level summary of your research (less than 2 pages)\n* **Brief or short paper:** Summary of your research (less than 4 pages)\n* **Full paper:** Complete paper describing your research in full (6-8 pages)\n\n\n### Manuscript Types Acceptable for Peer Review\n<br></br>\n**Regular**: This is a classic research article that has a hypothesis, investigation, solution, model, physical experiment and/or simulation and a result that is of value to the community within that area of expertise.\n\n**Survey**: A survey article analyzes, summarizes, systemizes, and presents fresh conclusions from a large number of recently published scholarly articles.\n* **Review**: A review article or review paper is based on other published articles. It does not report original research.\n* **SOK**: papers that evaluate, systematize, and contextualize existing knowledge, as such papers can provide a high value to our community.\n\n**Applied research**: This article describes challenges and practical solutions for topics within the journal’s scope. Quantitative results for validation of the approach are expected.\n\n\n\n\n\n","n":0.072}}},{"i":18,"$":{"0":{"v":"Proggramming Language","n":0.707}}},{"i":19,"$":{"0":{"v":"Makefile","n":1},"1":{"v":"\n\n### What is Makefile\n\nFile type that is used for compiling and linking programs from source code files. Makefiles contain five kinds of things: explicit rules, implicit rules, variable definitions, directives, and comments.\n\n### Useful Makefile\n\nThis make file can be usefull for small projects\n\n```shell\n\nCC=gcc\nRM=rm\nCFLAGS=-g -Wall\nOBJS=somefile.o\nBIN=main\n\nall:$(BIN)\n\nmain:$(OBJS)\n    $(CC) $(CFLAGS) $(OBJS) -o main\n\n%.o: %.c\n    $(CC) $(CFLAGS) -c $< -o $@\n\nclean: \n    $(RM) -r main *.o\n\n```\n","n":0.129}}},{"i":20,"$":{"0":{"v":"Encoding and Decoding","n":0.577},"1":{"v":"\n> This notes are copied from several sources, including wikis, blogs, etc\n\n## Why is used:\n\nEncoding and Decoding schemes are commonly used when there is a need to encode binary data that needs to be stored and transferred over media that are designed to deal with ASCII.\n\n## Types \n\nThere are several schemes for encoding and decoding, the most used are `base32` and `base64`.\n\n### Base32\n\nBase-32 numeral system. It uses a set of 32 digits, each of which can be represented by 5 bits (25). One way to represent Base32 numbers in a human-readable way is by using a standard 32-character set, such as the twenty-two upper-case letters A–V and the digits 0-9.\n\n**Advantages:**:\n\n* The resulting character set is all one case, which can often be beneficial when using a case-insensitive filesystem, DNS names, spoken language, or human memory.\n* The result can be used as a file name because it cannot possibly contain the '/' symbol, which is the Unix path separator.\n* The alphabet can be selected to avoid similar-looking pairs of different symbols, so the strings can be accurately transcribed by hand. (For example, the RFC 4648 symbol set omits the digits for one, eight and zero, since they could be confused with the letters 'I', 'B', and 'O'.)\n* A result excluding padding can be included in a URL without encoding any characters.\n* Base32 representation takes roughly 20% - 21% less space. (1000 bits takes 200 characters, compared with 250 for Base16).\n\n**Disadvantages**:\n\n* Base32 representation takes roughly 20% more space than Base64. Also, because it encodes 5 bytes to 8 characters (rather than 3 bytes to 4 characters), padding to an 8-character boundary is a greater burden on short messages.\n\n### Base64\n\n**Advantages:**:\n* Uses less space compared to base16 and base32.\n* Used to transport larger binary data, in ASCII format and smaller footprint.\n\n**Disadvantages**:\n* More complex to decode, and it is also case sensitive.\n\n## Optimization to save binary files online.\n\nThere are several sofwares that will encode your images and other binaries files and help you to add it into your html. This is not always a good idea because as mention above when we are encoding data most of the time it will increase the size of the data by 25%. This will not only lead to bigger data, also higher download time.\n\nAnother important factor is the CPU overhead, since the data is coming encoded the CPU needs to decode all the images/data taking also some of the resources of the machine.\n\nCahching Issues are also present since when a user access a website the images, and other types of binary data are saved into a cache to be displayed later on. Meaning a higher file size will not be beneficial in these cases.\n\n**Other cases**: Some times it is a good idea to use encoded data in places where the link is bigger than the actual `base64` data. This will also include logos,and small images and helps the recipient not deal with permissio queries to download by email client.\n\n\n\n","n":0.045}}},{"i":21,"$":{"0":{"v":"C++","n":1},"1":{"v":"\n\n## Information\n\nHere I will start inserting all the noted related to C++ from my front website\n\n\n**[[Proggramming Language.C++.C++V11]]**: Information about some of the features added in C++ Version 11\n\n**[[Proggramming Language.C++.C++ Streams]]**: Some of the methods for handling streams and buffers in C++.\n\n**[[Proggramming Language.C++.C++ Const]]**: How to use the `const` keyword and some examples.\n\n**[[Proggramming Language.C++.C++ Compiler Generated Functions]]**: When compaling on C++(G++) there are several function that are implicitly added. \n\n","n":0.12}}},{"i":22,"$":{"0":{"v":"IamGUI","n":1},"1":{"v":"\n\n[Github Repo](https://github.com/ocornut/imgui)\n\n\n\n### What is it?\n\nDear ImGui is a bloat-free graphical user interface library for C++. It outputs optimized vertex buffers that you can render anytime in your 3D-pipeline enabled application. It is fast, portable, renderer agnostic and self-contained (no external dependencies).\n\nDear ImGui is designed to enable fast iterations and to empower programmers to create content creation tools and visualization / debug tools (as opposed to UI for the average end-user). It favors simplicity and productivity toward this goal, and lacks certain features normally found in more high-level libraries.\n\nDear ImGui is particularly suited to integration in games engine (for tooling), real-time 3D applications, fullscreen applications, embedded applications, or any applications on consoles platforms where operating system features are non-standard.\n\n### How to use it\n\nThe README.md file has good explanation on it:[Here](https://github.com/ocornut/imgui#usage)\n\n### How to start\n\nTo be continued","n":0.086}}},{"i":23,"$":{"0":{"v":"C++V11","n":1},"1":{"v":"\n\n## C++ 11 [Link to Video](https://www.youtube.com/watch?v=U6mgsPqV32A&t=23s&ab_channel=BoQian)\n\n> This are notes taking from videos in BoQian Channel, for learning purpose.\n\n### Initializer List\n\n```cpp\n\n//C++ 03 initializer list:\nint arr[4] = {3, 2, 4, 5};\n\nvector<int> v;\nv.push_back(3);\nv.push_back(2);\nv.push_back(4);\nv.push_back(5);\n\n// C++ 11 extended the support \nvector<int> v = {3, 4, 1, 9};   // Calling initializer_list constructor\n// All the relevant STL containers have been updated to accept initializer_list.\n\n```\n\n```cpp\n// Define your own initializer_list constructor:\n#include <initializer_list>\nclass BoVector {\n   vector<int> m_vec;\n   public:\n   BoVector(const initializer_list<int>& v) {\n      for (initializer_list<int>::iterator itr = v.begin(); itr!=v.end(); ++ itr)\n         m_vec.push_back(*itr);\n   }\n};\n\nBoVector v = {0, 2, 3, 4};\nBoVector v{0, 2, 3, 4};   // effectively the same\n\n```\n\n### Uniform Initialization\n\n\n```cpp\n\n// C++ 03\nclass Dog {     // Aggregate class or struct\n   public:\n      int age;\n      string name;\n};\nDog d1 = {5, \"Henry\"};   // Aggregate Initialization\n\n// C++ 11 extended the scope of curly brace initialization\nclass Dog {\n   public:\n      Dog(int age, string name) {...};\n};\nDog d1 = {5, \"Henry\"}; \n\n```\n\nUniform Initialization Search Order(Compiler):\n1. Initializer_list constructor\n2. Regular constructor that takes the appropriate parameters.\n3. Aggregate initializer.\n\nExample:\n\n```cpp\nDog d1{3};\n\nclass Dog {\n   public:\n   int age;                                // 3rd choice\n\n   Dog(int a) {                            // 2nd choice\n      age = a;\n   }\n\n   Dog(const initializer_list<int>& vec) { // 1st choice\n      age = *(vec.begin());      \n   }\n};\n```\n\n### Auto Type\n\n```cpp\nstd::vector<int> vec = {2, 3, 4, 5};\n\n// C++ 03\nfor (std::vector<int>::iterator it = vec.begin(); it!=vec.end(); ++ it)\n    m_vec.push_back(*it);\n\n\n// C++ 11: use auto type\nfor (auto it = vec.begin(); it!=vec.end(); ++ it)\n    m_vec.push_back(*it);\n\nauto a = 6;    // a is a integer\nauto b = 9.6;  // b is a double\nauto c = a;    // c is an integer\n\nauto const x = a;   // int const x = a\nauto& y = a;        // int& y = a\n\n// It's static type, no run-time cost\n// It also makes code easier to maintain.\n\n// 1. Don't use auto when type conversion is needed\n// 2. IDE becomes more important\n\n```\n\n### foreach \n\n```cpp\n\n// C++ 03:\n   for (vector<int>::iterator itr = v.begin(); itr!=v.end(); ++ itr)\n      cout << (*itr);\n\n\n// C++ 11:\n   for (auto i: v) { // works on any class that has begin() and end()\n      cout << i ;    // readonly access\n   }\n\n   for (auto& i: v) {\n      i++;                 // changes the values in v\n   }                       // and also avoids copy construction\n\n   auto x = begin(v);  // Same as: int x = v.begin();\n\n   int arr[4] = {3, 2, 4, 5};\n   auto y = begin(arr); // y == 3\n   auto z = end(arr);   // z == 5\n   // How this worked? Because begin() and end() are defined for array.\n   // Adapt your code to third party library by defining begin() and end()\n   // for their containers.\n\n```\n\n### nullptr\n\n> To replace NULL in C++ 03\n\n```cpp\nvoid foo(int i) { cout << \"foo_int\" << endl; }\nvoid foo(char* pc) { cout << \"foo_char*\" << endl; }\n\nint main() {\n   foo(NULL);    // Ambiguity\n\n   // C++ 11\n   foo(nullptr); // call foo(char*)\n}\n```\n\n### enum class\n\n```cpp\n // C++ 03\n   enum apple {green_a, red_a};\n   enum orange {big_o, small_o};\n   apple a = green_a;\n   orange o = big_o;\n\n   if (a == o) \n      cout << \"green apple and big orange are the same\\n\";\n   else\n      cout << \"green apple and big orange are not the same\\n\";\n\n\n   // C++ 11\n   enum class apple {green, red};\n   enum class orange {big, small};\n   apple a = apple::green;\n   orange o = orange::big;\n\n   if (a == o) \n      cout << \"green apple and big orange are the same\\n\";\n   else\n      cout << \"green apple and big orange are not the same\\n\";\n\n   // Compile fails because we haven't define ==(apple, orange)\n\n\n```\n\n### static assert\n\n```cpp\n// run-time assert\n   assert( myPointer != NULL );\n\n// Compile time assert (C++ 11)\n   static_assert( sizeof(int) == 4 );\n```\n\n### delegating constructor\n\n```cpp\n// C++ 03:\nclass Dog {\n   init() { ... };\n   public:\n   Dog() { init(); }\n   Dog(int a) { init(); doOtherThings(); }\n};\n/* Cons:\n * 1. Cumbersome code.\n * 2. init() could be invoked by other functions.\n */\n\n// C++ 11:\nclass Dog {\n   int age = 9;\n   public:\n   Dog() { ... }\n   Dog(int a) : Dog() { doOtherThings(); }\n};\n// Limitation: Dog() has to be called first.\n\n```\n\n### constexpr\n\n```cpp\n\nint arr[6];    //OK\nint A() { return 3; }\nint arr[A()+3];   // Compile Error \n\n// C++ 11\nconstexpr int A() { return 3; }  // Forces the computation to happen \n                                 // at compile time.\nint arr[A()+3];   // Create an array of size 6\n\n// Write faster program with constexpr\nconstexpr int cubed(int x) { return x * x * x; }\n\nint y = cubed(1789);  // computed at compile time\n\n//Function cubed() is:\n//1. Super fast. It will not consume run-time cycles\n//2. Super small. It will not occupy space in binary.\n\n\n```\n\n### New string literals\n\n```cpp\n // C++ 03:\n  char*     a = \"string\";  \n\n  // C++ 11:\n  char*     a = u8\"string\";  // to define an UTF-8 string. \n  char16_t* b = u\"string\";   // to define an UTF-16 string. \n  char32_t* c = U\"string\";   // to define an UTF-32 string. \n  char*     d = R\"string \\\\\"    // to define raw string. \n\n\n```\n\n### Keyword final\n\n```cpp\nclass Dog final {    // no class can be derived from Dog\n   ...\n};\n   \nclass Dog {\n   virtual void bark() final;  // No class can override bark() \n};\n```\n\n### Keyword delete\n\n```cpp\nclass Dog {\n   Dog(int age) {}\n}\n\nDog a(2);\nDog b(3.0); // 3.0 is converted from double to int\na = b;     // Compiler generated assignment operator\n\n// preventing the user from using a class different manner\n// C++ 11:\nclass Dog {\n   Dog(int age) {}\n   Dog(double ) = delete; //\n   Dog& operator=(const Dog&) = delete;\n}\n\n```\n\n### Keyword default (for default constructor)\n\n```cpp\nclass Dog {\n   Dog(int age) {}\n};\n\nDog d1;  // Error: compiler will not generate the default constructor\n\n\n// C++ 11:\nclass Dog {\n   Dog(int age);\n   Dog() = default;    // Force compiler to generate the default constructor\n};\n\n\n```\n\n### Keyword override (for virtual function)\n\n```cpp\n\n// C++ 03\nclass Dog {\n   virtual void A(int);\n   virtual void B() const;\n}\n\nclass Yellowdog : public Dog {\n   virtual void A(float);  // Created a new function\n   virtual void B(); // Created a new function \n}\n\n\n// C++ 11\nclass Dog {\n   virtual void A(int);\n   virtual void B() const;\n   void C();\n}\n\nclass Yellowdog : public Dog {\n   virtual void A(float) override;  // Error: no function to override\n   virtual void B() override;       // Error: no function to override\n   void C() override;               // Error: not a virtual function\n}\n\n\n```\n\n### Lambda Function\n\n```cpp\n\ncout << [](int x, int y){return x+y}(3,4) << endl;  // Output: 7\nauto f = [](int x, int y) { return x+y; };\ncout << f(3,4) << endl;   // Output: 7\n\n\ntemplate<typename func>\nvoid filter(func f, vector<int> arr) {\n   for (auto i: arr) {\n      if (f(i))\n         cout << i << \" \";\n   }\n}\n\nint main() {\n   vector<int> v = {1, 2, 3, 4, 5, 6 };\n\n   filter([](int x) {return (x>3);},  v);    // Output: 4 5 6\n   ...\n   filter([](int x) {return (x>2 && x<5);},  v); // Output: 3 4\n\n\n   int y = 4;  \n   filter([&](int x) {return (x>y);},  v);    // Output: 5 6\n   //Note: [&] tells compiler that we want variable capture\n}\n\n// Lambda function works almost like a language extention\ntemplate\nfor_nth_item\n\n```\n\n\n","n":0.03}}},{"i":24,"$":{"0":{"v":"C++ Streams","n":0.707},"1":{"v":"\n\n## Intro: [Link](https://www.youtube.com/watch?v=hk5NYscSPHI&list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&index=18&ab_channel=BoQian)\n\nWhat is stream?: Serial IO Interferface to external devices (file, stdin/stdout, network, etc.)\n\n\n```cpp\nstring s(\"Hello\");\ns[3] = 't'; // Random access\n//cout[3] = 't'; // Error\n\n{\nofstream of(\"MyLog.txt\"); // Creates a new file for write, if the file didn't exist\nof << \"Text\" << endl;\nof << 234 <<endl;\nof << 2.3 <<endl; \n\nof << bitset<8>(14) << endl; // 00001110\nof << complex<int>(2,3) << endl; // (2,3)\n\n} //RAII\n\n```\n\nIO Operations:\n\nformatting the data  <-------->  communicatiing the data with external devices\n\nSoftware Engineer Principle: Low Couping -> Resuability\n\n\n## File Stream and Error Handling: [Link](https://www.youtube.com/watch?v=bzlDPBKn2Fs&list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&index=18&ab_channel=BoQian)\n\n\n**Ouput**: \n\n```cpp\n{\n    ofstream of(\"Log.txt\");// Open file for write , and clear the file\n    cout<< \"Text to the file\"<< endl;\n}\n\n{\n    ofstream of(\"Log.txt\", ofstream::app); // Move the output pointer to te end of the file\n    cout<< \"Text to the file\"<< endl;\n}\n{\n    ofstream of(\"Log.txt\", ofstream::in | ofstream::out);\n    of.seekp(10, ios::beg); // Move the output pointer 10 chars after begin\n    of << \"12345\"; // Overwrite 5 char\n    of.seekp(-5, ios::end); //Move the output  pointer 5 chars before end\n    of << \"More text, more text\" << endl;\n    of.seekp(-5, ios::cur); // Move the ouput pointer 5 char before the current position\n}\n```\n\n**Input**: \n\n```cpp\n{\n    ifstream inf(\"Log.txt\");\n    int i;\n    inf >> i; // read one word\n    // Error status: goodbit, badbit, failbit, eofbit\n    inf.good(); // Everything is OK (goodbit = 1)\n    inf.bad(); //Non-recoverable error (badbit = 1)\n    inf.fail(); //Failed Stream operation (failbit == 1 badbit == 1)\n    inf.eof(); // End of file (eofbit == 1)\n\n    inf.clear(); // Clear all error status\n    inf.clear(ios::badbit); // sets a new value to the error flag\n\n    inf.rdstate(); // Read the current status flag\n    inf.clear(inf.rdstate() & ~ios::failbit); // Clear only the failbit\n\n    if(inf) // Equivalent to: if (!inf.fail())\n        cout << \"Read successfully\"\n    \n    if(inf >> i)\n        cout << \"Read successfully\";\n\n    // Handle the errors with exceptions\n    inf.exceptions(ios::badbit | ios::failbit); // setting the exception mask\n    // When badbit or failbit set 1, exception of iosLLfailure will be thrown\n    // When eofbit set to 1, no exception \n    inf.exceptions(ios::goodbit); // No exception\n\n}\n```\n\n## Formatted and Unformatted IO: [Link](https://www.youtube.com/watch?v=CdZxKlC7Y-E&list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&index=19&ab_channel=BoQian)\n\n**Formatting IO**\n\n```cpp\n    \n    cout << 34 << endl; //34\n    cout.setf(ios::oct, ios::basefield);//ocatal\n    cout << 34; // 42\n    cout.setf(ios::showbase);\n    cout << 34; // 042\n    cout.setf(ios::hex, ios::basefield);\n    cout <<34; // 0x22\n\n    cout.unsetf(ios::showbase);\n    cout << 34; // 22\n\n    cout.setf(ios::dec, ios::basefield);\n\n    cout.width(10);\n    cout << 26 << endl; //          26\n    cout.setf(ios::left, ios::adjustfield);  //26\n\n    // Floating points values\n    cout.setf(ios::scientific, ios::floatfield); \n    cout << 340.1 << endl; // 3.401000e+002\n    cout.setf(ios::fixed, ios::floatfield);\n    cout << 340.1 << endl; //340.100000\n    cout.precision(3)l\n    cout << 340.1 << endl; //340.100\n\n    int i;\n    cin.setf(ios::hex, ios::basefield); \n    cin >> in // Enter: 12\n    //i==18\n\n    ios::fmtflags f = cout.flags(); //Current flags been used\n    cout.flags(ios::oct | ios::showbase);\n    cout.flags(); // returns ios::oct | ios::showbase\n\n```\n\n**Unformated IO**\n\n```cpp\n    ifstream inf(\"Log.txt\");\n    char buf[80];\n    inf.get(buf,80); // read up to 80 chars and save to buf\n    inf.getLine(buf, 80); //readu up to 80 or until a '\\n'\n    inf.read(buf, 80); // read 80 chars\n    inf.ignore(3);\n    inf.peek();\n    inf.unget(); // return a char back to the stream( retuns same last char)\n    inf.putback('z'); //returns a char 'z' to the stream\n    inf.get();\n    inf.gcount(); // return the number of  chars  being read  bu last unformatted read\n\n    //output\n    ofstream of(\"Log.txt\");\n    of.put('c');\n    of.write(buf, 6); // write first 6 chars of buf\n    of.flush(); // Flush output to screen in case of cout\n```\n\n\n## Manipulators: [Link](https://www.youtube.com/watch?v=yMseUJm1604&list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&index=20&ab_channel=BoQian)\n\nDescriptions: In this video [Bo Qian](https://www.youtube.com/channel/UCEOGtxYTB6vo6MQ-WQ9W_nQ) explains what are manipulators by using an example that is well know `std::endl`. A brief description concludes that endl is a fucntion that **manipulates** the stream.\n\n```cpp\n\n    ostream& endl(ostream& sm){ // Manipulator\n        sm.put('\\n');\n        sm.flush();\n        return sm;\n    }\n\n    ostream& ostream::operator<<(ostream& (*func)(ostream&)){\n        return (*func)(*this);\n    }\n\n    int main(){\n        cout << \"hello\" << endl; //endl: '\\n' and flush\n        // object? Build-in data type? function? (look to func above)\n\n        // More manipulators\n        cout << ends; //'\\0'\n        cout << flush;\n        cin >> ws; // read and discard white spaces\n        cout << setw(8) << left << setfill('_') << 99 << endl; //99______\n        cout << hex << showbase << 14; //0xe\n        \n        // More in: https://www.cplusplus.com/reference/ios/\n    }\n```\n\n## Stream Buffer: [Link](https://www.youtube.com/watch?v=HwtFcT-ueu8&list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&index=21&ab_channel=BoQian)\n\nIO Operations:\n* Formating data -- stream\n* Communicating data to external devices -- stream buffer\n\n```cpp\n\n    cout << 34; //Formatting\n    streambuf* pbuf = cout.rdbuf();\n\n    ostream myCout(pbuf);\n    myCout.setf(ios::showpos);\n    myCout.width(20);\n    myCout << 12 << endl; //        +12\n    cout << 12 << endl; //12\n    \n    //Redirecting\n    ofstream of(\"Log.txt\");\n    streambuf* oriBuf = cout.rdbuf(); // saving backup from original\n    cout.rdbuf(of.rdbuf());\n    cout << \"Hello\" << endl; // Log.txt has \"Hello\"\n\n    cout.rdbuf(oriBuf); // setting cout to original buffer\n\n    cout << \"Bye\" << endl; //stdout: Bye\n\n    //Stream buffer iterator\n    istreambuf_iterator<char> i(cin);\n    ostreambuf_iterator<char> o(cout);\n\n    // Copy\n    while(*i != 'x'){\n        *o = *i;\n        ++o;\n        ++i;\n    } // exit option if press x\n\n    //Similar to copy with no exit\n    copy(istreambuf_iterator<char>(cin), istreambuf_iterator<char>(), ostreambuf_iterator<char>(cout));\n\n```\n\n\n## String Stream : [Link](https://www.youtube.com/watch?v=VzM1GWUl8eI&list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&index=22&ab_channel=BoQian)\n\n```cpp\n\n    // Srtring Stream\n    stringstream ss; // Stream without IO operation\n    // read/write of string\n    // Example\n    ss << 89 << \" Hex: \" << hex << 89 << \" Oct: \" << oct << 89;\n    cout << ss.str() << endl; //89 Hex: 59 Oct: 131\n\n    int a, b, c;\n    string s1;\n\n    ss << hex >> a; // Formatted input works token by token, spaces, tabs, newlines\n        //a == 137\n    ss >> s1; // s1: \"Hex:\"\n    ss >> dec >> b; //b==59\n    \n    ss.ignore(6);\n\n    ss>> oct >> c; //c==89\n```\n\nRecommendation: `stringstream` is used in the example above for input and output but this fucntionality is also offered by two other stream class.\n\n* `ostringstream`: Used only for formatted output\n* `istringstream`: Used only for formatted input\n\nIt is recommended for readibility that we use the streams mention above, because they portray our intention for the given stream.\n\n\n## Enable Streaming for Your Own Class: [Link](https://www.youtube.com/watch?v=MefRKIml_1w&list=PL5jc9xFGsL8G3y3ywuFSvOuNm3GjBwdkb&index=23&ab_channel=BoQian)\n\nDescription: Class of `Dog` allows for IO Stream creating and outputing formatted data.\n\n```cpp\n\n    using namespace std;\n\n    //Creating Stream-enabled Class\n    struct Dog{\n        int age_;\n        string name_;\n    };\n\n    // Input Stream\n    ostream& operator<<(ostream& sm, const Dog& d){\n        sm << \"My name is \" << d.name_ << \" and my age is \" << d.age_ << endl;\n        return sm; \n    }\n\n    // Output Stream\n    istream& operator>>(istream& sm, Dog& d){\n        sm >> d.age_;\n        sm >> d.name_;\n        return sm;\n    }\n\n    int main(){\n        Dog d{2, \"Bob\"}; // Universal Initialization from c++11\n        cout << d;\n\n        cin >> d; // 5 carl [Input]\n        cin << d; //My name is carl and my age is 5 [Output]\n    }\n\n```\n","n":0.032}}},{"i":25,"$":{"0":{"v":"C++ Const","n":0.707},"1":{"v":"\n## `const` with functions\n\nReference: [Video](https://www.youtube.com/watch?v=RC7uE_wl1Uc&ab_channel=BoQian)\n\nUsing const in methods examples, and can be used for more efficiency.\n\n```cpp\n\nclass Dog {\n    // Class Memebers\n    int age;\n    string name;\n\n    public:\n    Dog() {age =3; name = \"dummy\";}\n    \n    // Const parameter\n    void setAge (const int& a ) {age = a;} // Correct[ pass by reference and can't be changed]\n    void setAge (const int a ) {age = a;} // const is not useful here\n    void setAge (int a ) {age = a;} // similar\n\n    //  Const return value\n    const string& getName() {return name;}; // pass by reference \"more efficient\"\n\n    //const function [Means it will not modify any members of the class]\n    void printDogName() const {\n        cout << getName() << \"const\" << endl; // const functions can only called const functions\n    }\n    // Overload const function (will be called if instance of the class is const)\n    void printDogName() {\n        cout << name << \"non-const\" << endl; // const functions can only called const functions\n    } \n     \n}\n\nint main(){\n    // Call regular\n    Dog d;\n    d.printDogName();\n\n    // Call overloaded \n    const Dog d2;\n    d2.printDogName();\n    }\n\n\n```\n\n\n\n","n":0.075}}},{"i":26,"$":{"0":{"v":"C++ Compiler Generated Functions","n":0.5},"1":{"v":"\n\n\n## What are generated functions:\n\nReference: [Video](https://www.youtube.com/watch?v=KMSYmY74AEs&ab_channel=BoQian)\n\nThis are functions that the compiler adds when you don't explicitly declare them(only if is required):\n1. Copy constructor\n2. Copy Assigment Operator\n3. Destructor\n4. Default constructor (only if there is not contructor declared)\n\n\n```cpp \n\nclass Dog{};\n\n// similar to\n\nclass Dog{\n\n    dog(const dog& rhs) {...} //Member by Member initialization\n    dog& operator=(const dog& rhs ) {...}; // Member by Member copying\n    dog() {...}; // 1- Call base class's default constructor\n                 // 2- Call data member's default constructor. \n    ~dog() {...};// 1- Call data class's destructor.\n                 // 2- Call data member's destructor. \n}\n\n```\n\nAdditional Information:\n1. These are public and inline.\n2. They are generatedd only if they are needed\n3. A `default constructor` is a constructor that can work without any parameters.\n\n\n","n":0.092}}},{"i":27,"$":{"0":{"v":"Notes","n":1},"1":{"v":"\n\n### Information\n\nThis will be some of the notes related to classes and other information that may be disorganized.\n\n","n":0.236}}},{"i":28,"$":{"0":{"v":"OS","n":1}}},{"i":29,"$":{"0":{"v":"RaspberryPi","n":1},"1":{"v":"\n\n\n\n#### Check Temperature\n\nTemperature on Raspberry PI GPU can be obtain by:\n\n```bash\n\n    #!/bin/bash\n    # Script: my-pi-temp.sh\n    # Purpose: Display the ARM CPU and GPU  temperature of Raspberry Pi 2/3 \n    # Author: Vivek Gite <www.cyberciti.biz> under GPL v2.x+\n    # -------------------------------------------------------\n    cpu=$(</sys/class/thermal/thermal_zone0/temp)\n    echo \"$(date) @ $(hostname)\"\n    echo \"-------------------------------------------\"\n    echo \"GPU => $(/opt/vc/bin/vcgencmd measure_temp)\"\n    echo \"CPU => $((cpu/1000))'C\"\n\n```\n\n","n":0.135}}},{"i":30,"$":{"0":{"v":"MPC","n":1},"1":{"v":"\n\n## Multiparty Computation(MPC) or Secure MPC (SMPC)\n\n**Secure multi-party computation (SMPC)** is a cryptographic technique that allows multiple people to compute a function, where the function itself and its outputs are public, but the inputs are kept private to each person.\n\nProtocols: \n\n* **Threshold secret sharing**\n* **Oblivious Transafer(OT)** allow two parties to transfer two encrypted messages from one party to the next in a way that ensures the messages were sent and received, but the sender doesn't know which one of the messages the receiver chose to open.\n* **Private Set Intersection(PSI)**\n* **Garbled Boolean circuits** are encrypted versions of digital logic circuits, consisting of hardware or programmed wires and logic gates that follow a prescribed logic when computing a function. To “garble” the circuit means encrypting the possible input combinations and possible outputs, described in the so-called truth tables at the logic gates. Then, each logic gate outputs cryptographic keys used to unlock the output of the next gate, a process set forth until arriving at the final result.\n* **Shamir's secret sharing**, data (for example, personal data or a machine learning model) is split up into fragments, which in themselves do not contain any usable information. The secret shares are distributed amongst a set of parties to perform secure computation over the shares, releasing output to a designated party once done.\n\nTo elevate the privacy posture and cover more use cases, MPC is often combined with federated learning, homomorphic encryption and differential privacy.\n\n\n\nReference: \n* [Multiparty computation as supplementary measure and potential data anonymization tool](https://iapp.org/news/a/multiparty-computation-as-supplementary-measure-and-potential-data-anonymization-tool/)\n* [A Pragmatic Introduction to Secure Multi-Party Computation](https://www.cs.virginia.edu/~evans/pragmaticmpc/pragmaticmpc.pdf)\n* [Out of the Box, Blockchain Powered Verifiable PPC Framework](https://deltampc.com/en)\n### Private Set Intersection(PSI)\n> Maybe can be implemented in IoT devices.\n\nPSI References: [Efficient Batched Oblivious PRF with Applications to Private Set Intersection](https://csrc.nist.gov/CSRC/media//Projects/pec/documents/stppa-02-PSI-rosulek.pdf)\n\n\n\n### What is Oblivious Transafer(OT)\n\nOblivious Transfer (OT) has been a central primitive in the area of secure computation.\n\nReferences:\n[The Simplest Protocol for Oblivious Transfer](https://eprint.iacr.org/2015/267.pdf)\n[SimpleOT Github](https://github.com/mkskeller/SimpleOT/tree/84d73522619f90ba2aabce8d660baef1442aa26d)\n\n\n### Secret Sharing\n\n<p>&nbsp;<img align=\"center\" src=\"https://github-readme-stats.vercel.app/api?username=rhg101997&show_icons=true&locale=en\" alt=\"rhg101997\" /></p>\n","n":0.056}}}]}
